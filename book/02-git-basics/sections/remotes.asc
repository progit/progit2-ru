[[_remote_repos]]
=== Работа с удалёнными репозиториями

Для того, чтобы внести вклад в какой-либо Git-проект, вам необходимо уметь работать с удалёнными репозиториями.
Удалённые репозитории представляют собой версии вашего проекта, сохранённые в интернете или ещё где-то в сети.
У вас может быть несколько удалённых репозиториев, каждый из которых может быть доступен для чтения или для чтения-записи.
Взаимодействие с другими пользователями предполагает управление удалёнными репозиториями, а также отправку и получение данных из них.
Управление репозиториями включает в себя как умение добавлять новые, так и умение удалять устаревшие репозитории, а также умение управлять различными удалёнными ветками, объявлять их отслеживаемыми или нет и так далее.
В данном разделе мы рассмотрим некоторые из этих навыков.

==== Просмотр удалённых репозиториев

Для того, чтобы просмотреть список настроенных удалённых репозиториев, вы можете запустить команду `git remote`.(((git commands, remote)))
Она выведет названия доступных удалённых репозиториев.
Если вы клонировали репозиторий, то увидите как минимум ``origin`` — имя по умолчанию для исходного репозитория:

[source,console]
----
$ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
remote: Reusing existing pack: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.
Resolving deltas: 100% (772/772), done.
Checking connectivity... done.
$ cd ticgit
$ git remote
origin
----

Вы можете также указать ключ `-v`, чтобы просмотреть адреса для чтения и записи, привязанные к репозиторию:

[source,console]
----
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
----

Если у вас больше одного удалённого репозитория, команда выведет их все.
Например, для репозитория с несколькими настроенными удалёнными репозиториями в случае совместной работы нескольких пользователей, вывод команды может выглядеть примерно так:

[source,console]
----
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)
----

Это означает, что мы можем легко получить изменения от любого из этих пользователей. Возможно, что некоторые из репозиториев доступны для записи, и в них можно отправлять свои изменения, хотя вывод команды не даёт никакой информации о правах доступа.

Обратите внимание на разнообразие протоколов, используемых при указании адреса удалённого репозитория. Подробнее протоколы рассмотрены в главе <<_git_on_the_server>>.

==== Добавление удалённых репозиториев

В предыдущих разделах мы уже упоминали и приводили примеры добавления удалённых репозиториев, сейчас рассмотрим эту операцию подробнее.(((git commands, remote)))
Для того, чтобы добавить удалённый репозиторий и присвоить ему имя (shortname), просто выполните команду `git remote add [shortname] [url]`:

[source,console]
----
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
----

Теперь вместо указания полного пути вы можете использовать `pb`.
Например, если вы хотите получить изменения, которые есть у Пола, но нету у вас, вы можете выполнить команду `git fetch pb`:

[source,console]
----
$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit
----

Ветка `master` из репозитория Пола сейчас доступна вам под именем `pb/master`.
Вы можете слить её с одной из ваших веток или переключить на неё локальную ветку, чтобы просмотреть содержимое ветки Пола.
Более подробно работа с ветками рассмотрена в <<_git_branching>>.

[[_fetching_and_pulling]]
==== Извлечение данных из удаленных репозиториев

Как вы уже видели, извлечь данные из удаленного репозитория можно следующим образом: (((git commands, fetch)))

[source,console]
----
$ git fetch [remote-name]
----

Эта команда связывается с удаленным проектом и извлекает оттуда все те данные, которых у вас еще нет. После этого у вас должны быть ссылки на все ветки удаленного репозитория, которые вы можете посмотреть или слить в любой момент.

При клонировании репозитория он автоматически добавляется под именем ``origin''.
Соответственно команда `git fetch origin` извлекает все новые данные, отправленные на сервер с тех пор как вы клонировали репозиторий (или в последний раз извлекли данные).
Нужно отметить, что команда `git fetch` извлекает данные в ваш локальный репозиторий – она не сливает их с вашими ветками и не изменяет их. Когда вы готовы выполнить слияние,  можете сделать это вручную.

Если вы настроили какую-либо ветку на отслеживание удаленной ветки (подробнее это описывается в главе <<_git_branching>>), то можете воспользоваться командой `git pull` – она автоматически извлекает данные из удаленной ветки и затем сливает их в вашу текущую ветку.(((git commands, pull)))
Такой рабочий процесс может быть легче и удобнее для вас; по умолчанию команда `git clone` автоматически настраивает вашу локальную ветку `master` на отслеживание удаленной ветки `master` (если она так названа по умолчанию) на сервере, с которого вы выполнили клонирование. В целом, команда `git pull` извлекает данные с ранее клонированного вами сервера и автоматически пытается слить их с вашим текущим рабочим кодом.

[[_pushing_remotes]]
==== Отправка данных в удалённый репозиторий

Когда вы готовы поделиться своим проектом, нужно отправить его на сервер.
Для этого есть простая команда: `git push [remote-name] [branch-name]`.(((git commands, push)))

Чтобы отправить ветку `master` со всеми сделанными вами коммитами на сервер `origin` (повторимся, обычно клонирование задает эти названия автоматически), выполните следующую команду:

[source,console]
----
$ git push origin master
----

Это работает только если вы выполнили клонирование с сервера, к которому у вас есть доступ на запись, и при этом никто не успел отправить свои данные. В случае если помимо вас кто-то еще клонировал репозиторий и отправил свои изменения раньше, чем это сделали вы, то ваша попытка отправить данные будет по праву отвергнута. Вам придется вытянуть (pull) свежие данные и объединить их со своими, прежде чем вы снова сможете выполнить команду `push`. Подробнее об отправке данных в удаленные репозитории написано в главе <<_git_branching>>.

[[_inspecting_remote]]
==== Детальный просмотр удалённого репозитория

Чтобы получить больше информации о конкретном репозитории, используется команда `git remote show [remote-name]`.(((git commands, remote)))
Выполнив команду с конкретным именем, например `origin`, вы получите что-то вроде этого:

[source,console]
----
$ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push  URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches:
    master                               tracked
    dev-branch                           tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
----

Команда выводит URL-адрес удаленного репозитория и информацию об отслеживаемых
ветках. Также она любезно сообщает вам, что, находясь в ветке `master`, выполнение команды `git pull` приведет к слиянию ветки `master` из удаленного репозитория в вашу после извлечения всех необходимых данных. Помимо этого она выводит список всех полученных ссылок.

Это был простой пример, с которым вы наверняка столкнетесь.
Однако при более интенсивном использовнии Git вывод команды `git remote show` может быть гораздо более объемным:

[source,console]
----
$ git remote show origin
* remote origin
  URL: https://github.com/my-org/complex-project
  Fetch URL: https://github.com/my-org/complex-project
  Push  URL: https://github.com/my-org/complex-project
  HEAD branch: master
  Remote branches:
    master                           tracked
    dev-branch                       tracked
    markdown-strip                   tracked
    issue-43                         new (next fetch will store in remotes/origin)
    issue-45                         new (next fetch will store in remotes/origin)
    refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)
  Local branches configured for 'git pull':
    dev-branch merges with remote dev-branch
    master     merges with remote master
  Local refs configured for 'git push':
    dev-branch                     pushes to dev-branch                     (up to date)
    markdown-strip                 pushes to markdown-strip                 (up to date)
    master                         pushes to master                         (up to date)
----

Здесь показывается, в какую удаленную ветку автоматически отправляются данные при выполнении команды `git push` из различных локальных веток.
Кроме этого перечисляются удаленные (remote) ветки, которых у вас пока нет, локальные ветки, которые уже удалены с сервера, и ветки, для которых выполняется слияние при вызове `git pull`.

==== Удаление и переименование удалённых репозиториев

Переименовать ссылку можно с помощью команды `git remote rename`, меняющей имя удаленного репозитория. (((git commands, remote)))
Например, вот так можно переименовать `pb` в `paul`:

[source,console]
----
$ git remote rename pb paul
$ git remote
origin
paul
----

Стоит отметить что это также меняет имена удаленных веток.
То что раньше было доступно по `pb/master`, теперь находится в `paul/master`.

Если по какой-то причине вы хотите удалить ссылку на удаленный репозиторий (вы поменяли сервер или больше не используете определенное зеркало, или, возможно, участник проекта в нем больше не участвует), используйте команду `git remote rm`:

[source,console]
----
$ git remote rm paul
$ git remote
origin
----

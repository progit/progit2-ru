[[r_git_tagging]]
=== Работа с метками

(((tags)))
Как и большинство СКВ, Git имеет возможность помечать (tag) определённые моменты в истории как важные.
Как правило, эта функциональность используется для отметки моментов выпуска версий (v1.0, и т.п.).
В этом разделе вы узнаете, как посмотреть имеющиеся метки (tag), как создать новые. А также вы узнаете, что из себя представляют разные типы меток.

==== Просмотр меток

Просмотр имеющихся меток (tag) в Git делается просто.
Достаточно набрать `git tag`:(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.3
----

Данная команда перечисляет метки в алфавитном порядке; порядок их появления не имеет значения.

Для меток вы также можете осуществлять поиск по шаблону.
Например, репозиторий Git содержит более 500 меток.
Если вас интересует просмотр только выпусков 1.8.5, вы можете выполнить следующее:

[source,console]
----
$ git tag -l 'v1.8.5*'
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5
----

==== Создание меток

Git использует два основных типа меток: легковесные и аннотированные.

Легковесная метка — это что-то весьма похожее на ветку, которая не меняется — это просто указатель на определённый коммит.

А вот аннотированные метки хранятся в базе данных Git как полноценные объекты.
Они имеют контрольную сумму, содержат имя поставившего метку, e-mail и дату, имеют комментарий и могут быть подписаны и проверены с помощью GNU Privacy Guard (GPG).
Обычно рекомендуется создавать аннотированные метки, чтобы иметь всю перечисленную информацию; но если вы хотите сделать временную метку или по какой-то причине не хотите сохранять остальную информацию, то для этого годятся и легковесные метки.

[[r_annotated_tags]]
==== Аннотированные метки

(((tags, annotated)))
Создание аннотированной метки в Git выполняется легко.
Самый простой способ это указать `-a` при выполнении команды `tag`:(((git commands, tag)))

[source,console]
----
$ git tag -a v1.4 -m 'my version 1.4'
$ git tag
v0.1
v1.3
v1.4
----

Опция `-m` задаёт сообщение метки, которое будет храниться вместе с меткой.
Если не указать сообщение для аннотированной метки, Git запустит редактор, чтоб вы смогли его ввести.

Вы можете посмотреть данные метки вместе с коммитом, который был помечен, с помощью команды `git show`:

[source,console]
----
$ git show v1.4
tag v1.4
Tagger: Ben Straub <ben@straub.cc>
Date:   Sat May 3 20:19:12 2014 -0700

my version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

Она показывает информацию о выставившем метку, дату отметки коммита и аннотирующее сообщение перед информацией о коммите.

==== Легковесные метки

(((tags, lightweight)))
Легковесная метка — это ещё один способ отметки коммитов.
В сущности, это контрольная сумма коммита, сохранённая в файл — больше никакой информации не хранится.
Для создания легковесной метки не передавайте опций `-a`, `-s` и `-m`:

[source,console]
----
$ git tag v1.4-lw
$ git tag
v0.1
v1.3
v1.4
v1.4-lw
v1.5
----

На этот раз при выполнении `git show` на этой метке вы не увидите дополнительной информации.(((git commands, show)))
Команда просто покажет помеченный коммит:

[source,console]
----
$ git show v1.4-lw
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

==== Выставление меток позже

Также возможно помечать уже пройденные коммиты.
Предположим, что история коммитов выглядит следующим образом:

[source,console]
----
$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function
4682c3261057305bdd616e23b64b0857d832627b added a todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme
----

Теперь предположим, что вы забыли отметить версию проекта v1.2, которая была там, где находится коммит ``updated rakefile''.
Вы можете добавить метку и позже.
Для отметки коммита укажите его контрольную сумму (или её часть) в конце команды:

[source,console]
----
$ git tag -a v1.2 9fceb02
----

Можете проверить, что коммит теперь отмечен:(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.2
v1.3
v1.4
v1.4-lw
v1.5

$ git show v1.2
tag v1.2
Tagger: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Feb 9 15:32:16 2009 -0800

version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon <mchacon@gee-mail.com>
Date:   Sun Apr 27 20:43:35 2008 -0700

    updated rakefile
...
----

[[r_sharing_tags]]
==== Обмен метками

По умолчанию, команда `git push` не отправляет метки на удалённые серверы.(((git commands, push)))
Необходимо явно отправить (push) метки на общий сервер после того, как вы их создали.
Это делается так же, как и добавление в репозиторий для совместного использования удалённых веток — нужно выполнить `git push origin [имя метки]`.

[source,console]
----
$ git push origin v1.5
Counting objects: 14, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (12/12), done.
Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.
Total 14 (delta 3), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.5 -> v1.5
----

Если у вас есть много меток, которые хотелось бы отправить все за один раз, можно использовать опцию `--tags` для команды `git push`.
В таком случае все ваши метки отправятся на удалённый сервер (если только их уже там нет).

[source,console]
----
$ git push origin --tags
Counting objects: 1, done.
Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.4 -> v1.4
 * [new tag]         v1.4-lw -> v1.4-lw
----

Теперь, если кто-то склонирует (clone) или выполнит `git pull` из вашего репозитория, то он получит вдобавок к остальному и ваши метки.

==== Переход на метку

В действительности вы не можете переходить на метки в Git, поскольку они не могут быть перемещены.
Если вы хотите установить версию вашего репозитория в рабочую директорию, которая выглядит, как определенная метка, вы можете создать новую ветку с определенной меткой:

[source,console]
----
$ git checkout -b version2 v2.0.0
Switched to a new branch 'version2'
----

Конечно, если вы так делаете и коммитите, ваша ветка `version2` будет немного отличаться от вашей метки `v2.0.0`, поскольку она будет двигаться вперед с новыми изменениями, так что будьте осторожны.

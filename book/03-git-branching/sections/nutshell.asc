[[r_git_branches_overview]]
=== О ветвлении в двух словах

Для точного понимания механизма ветвлений, необходимо вернуться назад и изучить то, как Git хранит данные.

Как вы можете помнить из <<ch01-introduction#ch01-introduction>>, Git не хранит данные в виде последовательности изменений, он использует набор снимков (snapshot).

Когда вы делаете коммит, Git сохраняет его в виде объекта, который содержит указатель на снимок (snapshot) подготовленных данных.
Этот объект так же содержит имя автора и email, сообщение и указатель на коммит или коммиты непосредственно предшествующие данному (его родителей): отсутствие родителя для первоначального коммита, один родитель для обычного коммита, и несколько родителей для результатов слияния двух и более веток.

Предположим, в вашей рабочей директории есть три файла и вы добавляете их все в индекс и создаёте коммит.
Во время индексации вычисляется контрольная сумма каждого файла (SHA-1 как мы узнали из <<ch01-introduction#ch01-introduction>>), затем каждый файл сохраняется в репозиторий (Git называет такой файл _блоб_ -- большой бинарный объект), а контрольная сумма попадёт в индекс:

[source,console]
----
$ git add README test.rb LICENSE
$ git commit -m 'initial commit of my project'
----

Когда вы создаёте коммит командой `git commit`, Git вычисляет контрольные суммы каждого подкаталога (в нашем случае, только основной каталог проекта) и сохраняет его в репозитории как объект дерева каталогов.
Затем Git создаёт объект коммита с метаданными и указателем на основное дерево проекта для возможности воссоздать этот снимок в случае необходимости.(((git commands, commit)))

Ваш репозиторий Git теперь хранит пять объектов: три блоб объекта (по одному на каждый файл), объект _дерева_ каталогов, содержащий список файлов и соответствующих им блобов, а так же объект _коммита_, содержащий метаданные и указатель на объект дерева каталогов.

.Коммит и его дерево
image::images/commit-and-tree.png[Коммит и его дерево.]

Если вы сделаете изменения и создадите ещё один коммит, то он будет содержать указатель на предыдущий коммит.

.Коммит и его родители
image::images/commits-and-parents.png[Коммит и его родители.]

Ветка в Git -- это простой перемещаемый указатель на один из таких коммитов.
По умолчанию, имя основной ветки в Git -- `master`.
Как только вы начнёте создавать коммиты, ветка `master` будет всегда указывать на последний коммит.
Каждый раз при создании коммита указатель ветки `master` будет передвигаться на следующий коммит автоматически.

[NOTE]
====
Ветка ``master'' в Git -- это не какая-то особенная ветка.(((master)))
Она точно такая же, как и все остальные ветки.
Она существует почти во всех репозиториях только лишь потому, что её создаёт команда `git init`, а большинство людей не меняют её название.
====

.Ветка и история коммитов
image::images/branch-and-history.png[Ветка и история коммитов.]

[[r_create_new_branch]]
==== Создание новой ветки

(((branches, creating)))
Что же на самом деле происходит при создании ветки?
Всего лишь создаётся новый указатель для дальнейшего перемещения.
Допустим вы хотите создать новую ветку с именем `testing`.
Вы можете это сделать командой `git branch` :(((git commands, branch)))

[source,console]
----
$ git branch testing
----

В результате создаётся новый указатель на текущий коммит.

.Две ветки указывают на одну и ту же последовательность коммитов
image::images/two-branches.png[Две ветки указывают на одну и ту же последовательность коммитов.]

Как Git определяет, в какой ветке вы находитесь?
Он хранит специальный указатель `HEAD`.
Имейте ввиду, что в Git концепция `HEAD` значительно отличается от других систем контроля версий, которые вы могли использовать раньше (Subversion или CVS).
В Git -- это указатель на текущую локальную ветку.
В нашем случае мы все еще находимся в ветке `master`.
Команда `git branch` только _создаёт_ новую ветку, но не переключает на неё.


.HEAD указывает на ветку
image::images/head-to-master.png[HEAD указывает на ветку.]

Вы можете легко это увидеть при помощи простой команды `git log`, которая покажет вам куда указывают указатели веток.
Эта опция называется `--decorate`.

[source,console]
----
$ git log --oneline --decorate
f30ab (HEAD, master, testing) add feature #32 - ability to add new
34ac2 fixed bug #1328 - stack overflow under certain conditions
98ca9 initial commit of my project
----

Здесь можно увидеть указывающие на коммит `f30ab` ветки: `master` и `testing`.

[[r_switching_branches]]
==== Переключение веток

(((branches, switching)))
Для переключения на существующую ветку выполните команду `git checkout`.(((git commands, checkout)))
Давайте переключимся на ветку `testing`:

[source,console]
----
$ git checkout testing
----

В результате указатель `HEAD` переместится на ветку `testing`.

.HEAD указывает на текущую ветку
image::images/head-to-testing.png[HEAD указывает на текущую ветку.]

Какой в этом смысл?
Давайте сделаем ещё один коммит:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made a change'
----

.Указатель на ветку HEAD переместился вперёд после коммита
image::images/advance-testing.png[Указатель на ветку HEAD переместился вперёд после коммита.]

Интересная ситуация: указатель на ветку `testing` переместился вперёд, а `master` указывает на тот же коммит, где вы были до переключения веток командой `git checkout`.
Давайте переключимся назад на ветку `master`:

[source,console]
----
$ git checkout master
----

.HEAD перемещается когда вы делаете checkout
image::images/checkout-master.png[HEAD перемещается, когда вы делаете checkout.]

Эта команда сделала две вещи: переместила указатель `HEAD` назад на ветку `master` и вернула файлы в рабочем каталоге в то состояние, на снимок которого указывает `master`.
Это также означает, что все вносимые с этого момента изменения будут относиться к старой версии проекта.
Другими словами, вы откатили все изменения ветки `testing` и можете продолжать в другом направлении.

[NOTE]
.Переключение веток меняет файлы в рабочем каталоге
====
Важно запомнить, что при переключении веток в Git происходит изменение файлов в рабочей директории.
Если вы переключаетесь на старую ветку, то рабочий каталог будет выглядеть так же, как выглядел на момент последнего коммита в ту ветку.
Если Git по каким-то причинам не может этого сделать -- он не позволит вам переключиться вообще.
====

Давайте сделаем еще несколько изменений и создадим очередной коммит:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made other changes'
----

Теперь история вашего проекта разошлась (см <<rdivergent_history>>).
Вы создали ветку и переключились на нее, поработали, а затем вернулись в основную ветку и поработали в ней.
Эти изменения изолированы друг от друга: вы можете свободно переключаться туда и обратно, а когда понадобится -- объединить их.
И все это делается простыми командами: `branch`, `checkout` и `commit`.

[[rdivergent_history]]
.Разветвлённая история
image::images/advance-master.png[Разветвлённая история.]

Все описанные действия можно визуализировать с помощью команды `git log`.
Для отображения истории коммитов, текущего положения указателей веток и истории ветвления выполните команду `git log --oneline --decorate --graph --all`.

[source,console]
----
$ git log --oneline --decorate --graph --all
* c2b9e (HEAD, master) made other changes
| * 87ab2 (testing) made a change
|/
* f30ab add feature #32 - ability to add new formats to the
* 34ac2 fixed bug #1328 - stack overflow under certain conditions
* 98ca9 initial commit of my project
----

Ветка в Git -- это простой файл, содержащий 40 символов контрольной суммы SHA-1 коммита, на который она указывает; поэтому операции с ветками являются дешёвыми с точки зрения потребления ресурсов или времени.
Создание новой ветки в Git происходит так же быстро и просто как запись 41 байта в файл (40 знаков и перевод строки).

Это принципиально отличает процесс ветвления в Git от более старых систем контроля версий, где все файлы проекта копируются в другой подкаталог.
В зависимости от размера проекта, операции ветвления в таких системах могут занимать секунды или даже минуты, когда в Git эти операции мгновенны.
Поскольку при коммите мы сохраняем указатель на родительский коммит, то поиск подходящей базы для слияния веток делается автоматически и, в большинстве случаев, очень прост.
Эти возможности побуждают разработчиков чаще создавать и использовать ветки.

Давайте посмотрим, почему и вам имеет смысл делать так же.

[NOTE]
.Одновременное создание новой ветки и переключение на неё
====
Как правило, при создании новой ветки вы хотите сразу на неё переключиться -- это можно сделать используя команду `git checkout -b <newbranchname>`.
====


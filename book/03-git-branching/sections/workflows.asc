=== Работа с ветками

Теперь, когда вы познакомились с основами ветвления и слияния. Возникает вопрос: что еще можно делать с ветками?
В этом разделе мы разберем некоторые стандартные рабочие примеры, ставшие возможными благодаря облегченной процедуре ветвления. Возможно, что-то из этого вы сможете включить в собственный цикл разработки.

==== Долгоживущие ветки

(((branches, long-running)))
Так как в Git применяется простое техэтапное слияние, ничто не мешает многократно объединять ветки в течении длительного времени.
То есть у вас может быть несколько постоянно открытых веток, применяемых для разных этапов цикла разработки. Содержимое некоторых из них будет регулярно сливаться в другие ветки.

Многие разработчики, использующие Git, придерживаются именно такого подхода, оставляя полностью стабильный код только в ветке `master`.
При этом существует и параллельная ветка с именем `develop` или `next`, служащая для работы и тестирования стабильности. После достижения стабильного результата ее содержимое сливается в ветку `master`.
Она используется для объединения завершенных задач из тематических веток (временных веток наподобие `iss53`), чтобы гарантировать, что эти задачи проходят тестирование и не вносят ошибок.

По сути, мы рассматриваем указатели, перемещающиеся по линии фиксируемых нами изменений.
Стабильные ветки находятся в нижнем конце истории коммитов, а самые свежие наработки — ближе к ее верхней части

.Линейное представление повышения стабильности веток
image::images/lr-branches-1.png[Линейное представление повышения стабильности веток.]

В общем случае можно представить набор рабочих накопителей, в котором наборы коммитов перемещаются на более стабильный уровень только после полного тестирования

[[lrbranch_b]]
.Представление диаграммы стабильности веток в виде многоуровневого накопителя
image::images/lr-branches-2.png[Представление диаграммы стабильности веток в виде многоуровневого накопителя]

Число уровней стабильности можно увеличить. 
В крупных проектах зачастую появляется ветка `proposed` или `pu` (proposed updates), объединяющая ветки с содержимым, которое невозможно включить в ветку `next` или `master`.
Фактически каждая ветка представляет собственный уровень стабильности. Как только он повышается, содержимое сливается в ветку, расположенную выше.
Разумеется, можно и вообще обойтись без долгоживущих веток, но зачастую они имеют смысл, особенно при работе над большими и сложными проектами.

[[_topic_branch]]
==== Тематические ветки

(((branches, topic)))
А вот такая вещь, как тематические ветки, полезна вне зависимости от величины проекта.
Тематической (topic branch) называется временная ветка, создаваемая и используемая для работы над конкретной функциональной возможностью или решения сопутствующих задач.
Скорее всего, при работе с другими СКВ вы никогда ничего подобного не делали, так как там создание и слияние веток — затратные операции.
Но в Git принято много раз в день создавать ветки, работать с ними, сливать их и удалять.


Пример тематических веток вы видели в предыдущем разделе, когда мы создавали ветки `iss53` и `hotfix`.
Для каждой из них было выполнено несколько коммитов, после чего сразу же после слияния с основной веткой они были удалены.
Такая техника позволяет быстро и радикально осуществлять переключения контекста.
Работа разделена по уровням, и все изменения в конкретной ветке относятся к определенной теме, а значит, во время просмотра кода проще понять, что и где было сделано.
Ветку с внесенными в нее изменениями можно хранить минуты, дни или даже месяцы, и выполнять ее слияние, только когда это действительно требуется, независимо от порядка создания веток в рамках проекта и порядка работы с ними.


Предположим, мы работаем в ветке `master`, ответвляемся для решения попутной проблемы (`iss91`), некоторое время занимаемся ею, затем создаем ветку, чтобы попробовать решить эту задачу другим способом (`iss91v2`), возвращаемся в ветку master, выполняем там некие действия и создаем новую ветку для действий, в результате которых не уверены (ветка `dumbidea`).
Результирующая история коммитов будет выглядеть примерно так:

.Набор тематических веток
image::images/topic-branches-1.png[Набор тематических веток.]


Предположим, вам больше нравится второй вариант решения задачи (`iss91v2`), а ветку `dumbidea` вы показали коллегам, и оказалось, что там содержится гениальная идея.
Фактически вы можете удалить ветку `iss91` (потеряв коммиты `C5` и `C6`) и слить две другие ветки. 
После этого история будет выглядеть так:

.История после слияния веток `dumbidea` и `iss91v2`
image::images/topic-branches-2.png[История после слияния веток `dumbidea` и `iss91v2`.]

Более подробно допустимые варианты рабочих схем для проектов рассматриваются в <<_distributed_git>>, поэтому перед выбором схемы обязательно прочитайте эту главу.

Важно помнить, что во время всех этих манипуляций ветки полностью локальны.
Ветвления и слияния выполняются только в репозитории Git, связь с сервером не требуется.

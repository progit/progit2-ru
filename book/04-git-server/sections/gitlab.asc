=== GitLab

(((serving repositories, GitLab)))(((GitLab)))
GitWeb довольно-таки прост.
Если вам нужен более современный, полнофункциональный Git-сервер, есть несколько решений с открытым исходным кодом, которые можно использовать.
Так как GitLab это один из самых популярных, мы рассмотрим его установку и использование в качестве примера.
Это немного сложнее, чем GitWeb, и скорее всего потребует больше обслуживания, но и функциональность гораздо богаче.

==== Установка

GitLab -- это веб-приложение на основе базы данных, так что его установка немного сложней, чем у некоторых других серверов git.
К счастью, этот процесс хорошо задокументирован и поддерживается.

Есть несколько подходов к установке GitLab.
Для экономии времени, вы можете загрузить образ виртуальной машины или инсталлятор с https://bitnami.com/stack/gitlab[] и поправить конфигурацию под своё окружение.(((bitnami)))
Приятная возможность, включенная Bitnami, это экран входа (доступен по нажатию alt+→); он указывает IP-адрес и логин с паролем по умолчанию для установленного GitLab.

[[rbitnami]]
.Экран входа виртуальной машины Bitnami GitLab.
image::images/bitnami.png[Экран входа виртуальной машины Bitnami GitLab.]

Для всего остального, следуйте инструкциям GitLab Community Edition, которые можно найти на https://gitlab.com/gitlab-org/gitlab-ce/tree/master[].
Там вы найдёте помощь по установке GitLab посредством рецептов Chef, виртуальную машину для Digital Ocean, или из RPM или DEB пакетов (которые на момент написания всё ещё находились в бета-версии).
Есть также ``неофициальная'' инструкция по запуску GitLab на нестандартных операционных системах и базах данных, полностью ручной сценарий установки и множество других тем.

==== Администрирование

Административный интерфейс GitLab доступен через веб.
Просто направьте ваш браузер на имя или IP-адрес хоста, где установлен GitLab, и войдите как администратор.
Имя пользователя по умолчанию `admin@local.host`, пароль по умолчанию `5iveL!fe` (вас попросят изменить их при входе).
Войдя, нажмите иконку ``Административная зона'' в меню справа и сверху.

[[rgitlab_menu]]
.Пункт ``Административная зона'' в меню GitLab.
image::images/gitlab-menu.png[Пункт ``Административная зона'' в меню GitLab.]

===== Пользователи

Пользователи в GitLab -- это учётные записи, соответствующие людям.
Пользовательские учётные записи не очень сложны; в основном это набор персональной информации, прикреплённый к имени.
У каждого пользователя есть *пространство имён*, логически группирующее проекты данного пользователя.
Если у пользователя +jane+ есть проект +project+, адрес этого проекта будет http://server/jane/project[].

[[rgitlab_users]]
.Экран управления пользователями GitLab.
image::images/gitlab-users.png[Экран управления пользователями GitLab.]

Удаление пользователя может быть выполнено двумя способами.
``Блокирование'' (``Blocking'') пользователя запрещает ему вход в GitLab, но все данные в его пространстве имен сохраняются, и коммиты, подписанные этим пользователем, будут указывать на его профиль.

``Разрушение'' (``Destroying'') пользователя, с другой стороны, полностью удаляет его из базы данных и файловой системы.
Все проекты и данные в его пространстве имен удаляются, как и все принадлежащие ему группы.
Конечно, этим более постоянным и разрушительным действием пользуются реже.

[[r_gitlab_groups_section]]
===== Группы

Группы GitLab -- это коллекция проектов с указанием того, как пользователи получают к ним доступ.
Каждая группа имеет пространство имён проектов (так же как и пользователи), так что если в группе +training+ есть проект +materials+, его адрес будет http://server/training/materials[].

[[rgitlab_groups]]
.Экран управления группами GitLab.
image::images/gitlab-groups.png[Экран управления группами GitLab.]

Каждая группа связана с пользователями, каждый из которых имеет уровень доступа к проектам группы и к самой группе.
Он разнится от ``Гостя'' (``Guest'', только проблемы и чат) до ``Владельца'' (``Owner'', полный контроль над группой, её членами и проектами).
Типы разрешений слишком обширны, чтобы перечислять их здесь, но на экране управления GitLab есть полезная ссылка с описанием.

===== Проекты

Проект GitLab примерно соответствует одному git-репозиторию.
Каждый проект принадлежит одному пространству имён, групповому или пользовательскому.
Если проект принадлежит пользователю, владелец контролирует, кто имеет доступ к проекту; если проект принадлежит группе, действуют групповые уровни доступа для пользователей.

Каждый проект также имеет уровень видимости, который контролирует, кто имеет доступ на чтение страниц проекта или репозитория.
Если проект _Приватный_ (_Private_), владелец должен явно дать доступ на чтение отдельным пользователям.
_Внутренний_ (_Internal_) проект виден любому вошедшему пользователю GitLab, а _Публичный_ (_Public_) проект видим всем.
Это относится как к доступу git ``fetch'', так и к доступу к проекту через веб-интерфейс.

===== Хуки

GitLab включает поддержку хуков (перехватчиков, hooks) на уровне проектов и всей системы.
В обоих случаях, когда происходит некоторое событие, сервер GitLab выполняет запрос HTTP POST с осмысленным JSON-содержанием.
Это отличный способ соединить ваши git-репозитории и инсталляцию GitLab с автоматикой инфраструктуры разработки, такой как сервера непрерывной интеграции, комнаты чатов или инструменты деплоя.

==== Базовое использование

Первое, чего вы захотите от GitLab, это создать новый проект.
Это достигается нажатием иконки ``+'' на панели инструментов.
Будут запрошены имя проекта, пространство имён, которому он должен принадлежать, и уровень видимости.
Большинство из этих настроек можно потом изменить через интерфейс настроек.
Нажмите ``Создать проект'' (``Create Project''), чтобы закончить.

Когда проект создан, вы, наверное, захотите соединить его с локальным git-репозиторием.
Каждый проект может быть доступен через HTTPS или SSH, каждый из которых может быть использован для указания удалённого репозитория.
Адреса (URL) видимы наверху домашней страницы проекта.
Для существующего локального репозитория, следующая команда создаст удалённый репозиторий с именем `gitlab` и размещением на сервере:

[source,console]
----
$ git remote add gitlab https://server/namespace/project.git
----

Если у вас нет локального репозитория, можно просто сделать его:

[source,console]
----
$ git clone https://server/namespace/project.git
----

Веб-интерфейс даёт доступ к нескольким полезным видам самого репозитория.
Домашняя страница каждого проекта показывает недавнюю активность, а ссылки наверху ведут на список файлов проекта и журнала коммитов.

==== Совместная работа

Самый простой метод совместной работы над проектом GitLab -- это выдача другому пользователю прямого доступа на запись (push) в git-репозитории.
Вы можете добавить пользователя в проект в разделе ``Участники'' (``Members'') настроек проекта, указав уровень доступа (уровни доступа кратко обсуждались в <<r_gitlab_groups_section>>).
Получая уровень доступа ``Разработчик'' (``Developer'') или выше, пользователь может невозбранно отсылать свои коммиты и ветки непосредственно в репозиторий.

Другой, более разобщённый способ совместной работы -- использование запросов на слияние (merge requests).
Эта возможность позволяет любому пользователю, который видит проект, вносить свой вклад подконтрольным способом.
Пользователи с прямым доступом могут просто создать ветку, отослать в неё коммиты и открыть запрос на слияние из их ветки обратно в `master` или любую другую ветку.
Пользователи без доступа на запись могут ``форкнуть'' репозиторий (``fork'', создать собственную копию), отправить коммиты в _эту_ копию и открыть запрос на слияние из их форка обратно в основной проект.
Эта модель позволяет владельцу полностью контролировать, что попадает в репозиторий и когда, принимая помощь от недоверенных пользователей.

Запросы на слияние и проблемы (issues) это основные единицы долгоживущих дискуссий в GitLab.
Каждый запрос на слияние допускает построчное обсуждение предлагаемого изменения (поддерживая облегчённое рецензирование кода), равно как и общее обсуждение.
И те и другие могут присваиваться пользователям или организовываться в вехи (milestones).

Мы в основном сосредоточились на частях GitLab, связанных с git, но это -- довольно зрелая система, и она предоставляет много других возможностей, помогающих вашей команде работать совместно, например вики-страницы для проектов и инструменты поддержки системы.
Одно из преимуществ GitLab в том, что, однажды запустив и настроив сервер, вам редко придётся изменять конфигурацию или заходить на него по SSH; большинство административных и пользовательских действий можно выполнять через веб-браузер.

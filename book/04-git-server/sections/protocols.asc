=== Протоколы

Git умеет работать с четырьмя сетевыми протоколами для передачи данных: локальный, HTTP, Secure Shell (SSH) и Git.
В этой части мы обсудим каждый из них и в каких случаях стоит или не стоит его использовать.

==== Локальный протокол

(((protocols, local)))
Базовым протоколом является _Локальный протокол_, для которого удаленный репозиторий -- это другой каталог на диске.
Наиболее часто он используется, если все члены команды имеют доступ к общей файловой системе, например к NFS, или, что менее вероятно, когда все работают на одном компьютере.
Последний вариант не идеален, поскольку все копии вашего репозитория находятся на одном компьютере, что резко увеличивает вероятность потерять всё.

Если у вас смонтирована общая файловая система, вы можете клонировать, отправлять и получать изменения из локального репозитория.
Чтобы клонировать такой репозиторий или добавить его в качестве удаленного в существующий проект, используйте путь к репозиторию в качестве URL.
Например, для клонирования локального репозитория вы можете выполнить что-то вроде этого:

[source,console]
----
$ git clone /srv/git/project.git
----

Или этого:

[source,console]
----
$ git clone file:///srv/git/project.git
----

Git работает немного по-другому, если вы явно укажете префикс `file://` в начале вашего URL.
Когда вы просто указываете путь, Git пытается использовать жесткие ссылки или копировать необходимые файлы.
Если вы указываете `file://`, Git работает с данными так же, как при использовании сетевых протоколов, что снижает эффективность передачи данных.
Причиной для использования `file://` может быть необходимость создания чистой копии репозитория без лишних внешних ссылок и объектов, обычно после импорта из другой системы управления версиями или чего-то похожего (задачи по обслуживанию рассмотрены в разделе <<ch10-git-internals#ch10-git-internals>>).
Мы будем использовать обычные пути, поскольку это практически всегда быстрее.

Чтобы добавить локальный репозиторий в существующий проект, вы можете воспользоваться командой:

[source,console]
----
$ git remote add local_proj /srv/git/project.git
----

Теперь вы можете отправлять и получать изменения из этого репозитория так, как вы это делали по сети.

===== Достоинства

Преимущества основанных на файлах репозиториев в том, что они просты и используют существующие разграничения прав на файлы и сетевой доступ.
Если у вас уже есть общая файловая система, доступ к которой имеет вся команда, настройка репозитория очень проста.
Вы помещаете голый репозиторий туда, куда все имеют доступ, и выставляете права на чтение и запись, как вы бы это сделали для любого другого общего каталога.
Мы обсудим, как экспортировать голую копию репозитория для этой цели, в следующем разделе: <<ch04-git-on-the-server#r_git_on_the_server>>.

Также это хорошая возможность быстро получить наработки из чьего-то рабочего репозитория.
Если вы и ваш коллега работаете над одним и тем же проектом, и он хочет, чтобы вы что-то проверили, то запуск команды вроде `git pull /home/john/project` зачастую проще, чем отправлять и забирать с удалённого сервера.

===== Недостатки

Недостаток этого метода в том, что общий доступ обычно сложнее настроить и получить из разных мест, чем простой сетевой доступ.
Если вы хотите отправлять со своего ноутбука находясь дома, вы должны смонтировать удалённый диск, что может оказаться сложнее и медленнее, чем доступ по сети.

Также важно упомянуть, что не всегда использование общей точки монтирования является быстрейшим вариантом.
Локальный репозиторий быстр, только если вы имеете быстрый доступ к данным.
Репозиторий на NFS часто медленнее, чем репозиторий через SSH на том же сервере, позволяющий Git использовать на полную локальные диски на каждой системе.

Наконец, этот протокол не защищает репозиторий от случайного повреждения.
Все пользователи имеют доступ к ``удалённой'' директории и ничего не мешает изменению или удалению внутренних файлов Git и, как следствие, повреждению репозитория.

==== Протоколы HTTP

Git может работать через HTTP в двух различных режимах.
До версии Git 1.6.6 был только один режим, очень простой и предназначенный только для чтения.
В версии 1.6.6 появился новый, более умный режим, позволяющий Git более интеллектуально определять необходимость передачи данных, наподобие того, как это происходит при использовании SSH.
В последние годы новый протокол стал очень популярен, так как он проще для пользователя и более эффективен.
Новая версия часто называется _Умным_ (_Smart_) HTTP, а старая _Тупым_ (_Dumb_) HTTP.
Сначала мы рассмотрим Умный протокол.

===== Умный HTTP

(((protocols, smart HTTP)))
``Умный'' протокол HTTP работает схожим с SSH или Git-протоколами образом, но поверх стандартных HTTP/S портов и может использовать различные механизмы аутентификации HTTP, это часто проще для пользователя, чем что-то вроде SSH, так как можно использовать аутентификацию по логину/паролю вместо установки SSH-ключей.

Наверное, сейчас он стал наиболее популярным способом использования Git, так как может использоваться и для анонимного доступа как протокол `git://`, и для отправки изменений с аутентификацией и шифрованием как протокол SSH.
Вместо использования разных адресов URL для этих целей, можно использовать один URL адресс для всего.
Если вы пытаетесь отослать изменения и репозиторий требует аутентификации (обычно так и есть), сервер может спросить логин и пароль.
То же касается и доступа на чтение.

На самом деле для сервисов вроде GitHub, адрес URL, который вы используете для просмотра репозитория в браузере (например, https://github.com/schacon/simplegit[]), можно использовать для клонирования или, если у вас есть доступ, для отправки изменений.

===== Тупой HTTP

(((protocols, dumb HTTP)))
Если сервер не отвечает на умный запрос Git по HTTP, клиент Git попытается откатиться на более простой _Тупой_ HTTP-протокол.
Тупой протокол ожидает, что голый репозиторий Git будет обслуживаться веб-сервером как набор файлов.
Прелесть тупого протокола HTTP -- в простоте настройки.
По сути, всё, что необходимо сделать -- поместить голый репозиторий в корневую каталог HTTP и установить обработчик `post-update`(смотри <<ch08-customizing-git#r_git_hooks>>).
Теперь каждый может клонировать репозиторий, если имеет доступ к веб-серверу, на котором он был размещен.
Таким образом, чтобы открыть доступ на чтение к вашему репозиторию посредством HTTP, нужно сделать что-то наподобие этого:

[source,console]
----
$ cd /var/www/htdocs/
$ git clone --bare /path/to/git_project gitproject.git
$ cd gitproject.git
$ mv hooks/post-update.sample hooks/post-update
$ chmod a+x hooks/post-update
----

Вот и всё.(((hooks, post-update)))
Обработчик `post-update`, входящий в состав Git по умолчанию, выполняет необходимую команду (`git update-server-info`), чтобы получение изменений и клонирование по HTTP работали правильно.
Эта команда выполняется, когда вы отправляете изменения в репозиторий (возможно посредством SSH); затем остальные могут клонировать его командой

[source,console]
----
$ git clone https://example.com/gitproject.git
----

В рассмотренном примере мы использовали каталог `/var/www/htdocs`, обычно используемый сервером Apache, но вы можете использовать любой веб-сервер, отдающий статические данные, расположив голый репозиторий в нужном каталоге.
Данные Git представляют собой обычные файлы (в разделе <<ch10-git-internals#ch10-git-internals>> приведены детали отдачи таких файлов).

Чаще всего вы будете использовать Умный HTTP для чтения/записи, либо Тупой только для чтения.
Случай совместного их использования встречаются редко.

===== Достоинства

Мы сосредоточимся на преимуществах Умной версии протокола HTTP.

Простота использования одного адреса URL для всех типов доступа и аутентификации только при необходимости упрощает работу для конечного пользователя.
Возможность аутентификации посредством логина и пароля также даёт преимущество перед SSH, так как пользователям перед использованием не нужно создавать SSH-ключи и загружать публичный ключ на сервер.
Для неопытных пользователей или пользователей систем, где SSH мало распространён, это большой плюс.
Это также очень быстрый и эффективный протокол, сравнимый с SSH.

Вы также можете предоставлять доступ к своим репозиториям только для чтения по HTTPS, шифруя содержимое передачи; или вы можете зайти так далеко, что клиенты будут использовать персональные подписанные SSL-сертификаты.

Другой плюс в том, что HTTP/S очень распространённые протоколы и корпоративные брандмауэры часто настроены для разрешения их работы.

===== Недостатки

На некоторых серверах Git поверх HTTP/S может быть немного сложнее в настройке по сравнению с SSH.
Кроме этого, преимущества других протоколов доступа к Git перед Умным HTTP незначительны.

Если вы используете HTTP для аутентифицированной отправки изменений, ввод учётных данных зачастую сложнее, чем при использовании SSH-ключей.
Но есть несколько инструментов для кеширования учётных данных, включая Keychain access на OSX и Credential Manager на Windows, которые вы можете использовать для упрощения процесса.
В разделе <<ch07-git-tools#r_credential_caching>> рассказывается как настроить безопасное кэширование пароля в вашей системе.

==== Протокол SSH

(((protocols, SSH)))
Часто используемый транспортный протокол для самостоятельного хостинга Git -- это SSH.
Причина этого в том, что доступ по SSH уже есть на многих серверах, а если его нет, то его очень легко настроить.
К тому же, SSH -- протокол с аутентификацией, и его благодаря распространенности обычно легко настроить и использовать.

Чтобы клонировать Git-репозиторий по SSH, вы можете указать префикс `ssh://`` в URL, например:

[source,console]
----
$ git clone ssh://[user@]server/project.git
----

Или можно использовать для протокола SSH краткий синтаксис наподобие scp:

[source,console]
----
$ git clone [user@]server:project.git
----

Также вы можете не указывать имя пользователя, Git будет использовать то, под которым вы вошли в систему.

===== Достоинства

SSH имеет множество достоинств.
Во-первых, SSH достаточно легко настроить -- демоны SSH распространены, многие системные администраторы имеют опыт работы с ними и во многих дистрибутивах они предустановлены или есть утилиты для управления ими.
Далее, доступ по SSH безопасен -- данные передаются зашифрованными по авторизованным каналам.
Наконец, так же как и протоколы HTTP/S, Git и локальный протокол, SSH эффективен благодаря максимальному сжатию данных перед передачей.

===== Недостатки

Недостаток SSH в том, что, используя его, вы не можете обеспечить анонимный доступ к репозиторию.
Клиенты _должны_ иметь доступ к машине по SSH, даже для работы в режиме только на чтение, что делает SSH неподходящим для проектов с открытым исходным кодом.
Если вы используете Git только внутри корпоративной сети, то, возможно, SSH -- единственный протокол, с которым вам придется иметь дело.
Если же вам нужен анонимный доступ на чтение для своих проектов, придется настроить SSH для себя, чтобы выкладывать изменения, и что-нибудь другое для других, для скачивания.

==== Git-протокол

(((protocols, git)))
Следующий протокол -- Git-протокол.
Вместе с Git поставляется специальный демон, который слушает отдельный порт (9418) и предоставляет сервис, схожий с протоколом SSH, но абсолютно без аутентификации.
Чтобы использовать Git-протокол для репозитория, вы должны создать файл `git-export-daemon-ok`, иначе демон не будет работать с этим репозиторием, но следует помнить, что в протоколе отсутствуют средства безопасности.
Соответственно, любой репозиторий в Git может быть либо доступен для клонирования всем, либо нет.
Как следствие, обычно отправлять изменения по этому протоколу нельзя.
Вы можете открыть доступ на запись, но из-за отсутствия аутентификации в этом случае кто угодно, зная URL вашего проекта, сможет его изменить.
В общем, это редко используемая возможность.

===== Достоинства

Git-протокол ― часто самый быстрый из доступных протоколов.
Если у вас проект с публичным доступом и большой трафик, или у вас очень большой проект, для которого не требуется аутентификация пользователей для чтения, вам стоит настроить демон Git для вашего проекта.
Он использует тот же механизм передачи данных, что и протокол SSH, но без дополнительных затрат на шифрование и аутентификацию.

===== Недостатки

Недостатком Git-протокола является отсутствие аутентификации.
Поэтому обычно не следует использовать этот протокол как единственный способ доступа к вашему проекту.
Обычно он используется в паре с SSH или HTTPS для нескольких разработчиков, имеющих доступ на запись, тогда как все остальные используют `git://` с доступом только на чтение.
Кроме того, это, вероятно, самый сложный для настройки протокол.
Вы должны запустить отдельный демон, для чего необходимо дополнительно настраивать `xinetd` или `systemd` или им подобные, что не всегда легко сделать.
Также необходимо, чтобы сетевой экран позволял доступ на порт 9418, который не относится к стандартным портам, всегда разрешённым в корпоративных брандмауэрах.
За сетевыми экранами крупных корпораций этот неизвестный порт часто заблокирован.

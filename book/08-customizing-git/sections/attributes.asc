=== Атрибуты Git

(((attributes)))
Некоторые из настроек могут быть применены к директории, поэтому Git применят их только к поддиректориям или набору файлов.
Настройки, зависящие от пути, называются атрибутами и могут быть установлены либо в файле `.gitattributes` в любой из директорий проекта (обычно, в корневой директории), либо в файле `.git/info/attributes`, если вы не хотите хранить их в репозитории вместе с вашим проектом.

Используя атрибуты, вы можете настраивать различные стратегии слияния для отдельных файлов или директорий вашего проекта, указать Git как сравнивать бинарные файлы, настраивать фильтры добавления или извлечения данных из репозитория.
В этом разделе вы узнаете о некоторых атрибутах, которые можно установить для заданных путей в вашем проекте и рассмотрите несколько практических примеров.

==== Бинарные файлы

(((binary files)))
Интересная возможность атрибутов Git, которая может вам пригодииться, заключается в указании файлов, которы следует считать бинарными (особенно, когда определить это не представляется возможным), и определении инструкций как именно Git должен обрабатывать эти файлы.
Например, некоторые текстовые файлы могут генерироваться автоматически и отследить изменения в них невозможно, в то же время, отследить изменения некоторых бинарных файлов вполне возможно.
Далее вы увидите как объяснить Git где какой файл.

===== Идентификация бинарных файлов

Некоторые файлы выглядят как текстовые, но работать с ними нужно как с бинарными данными.
Например, на Mac в Xcode проекте содержится файл с расширением `.pbxproj`, который генерируется IDE, содержит различные настройки проекта и сохраняется в формате JSON (текстовое представление Javascript данных).
Технически - это текстовый файл (потому как все данные в UTF-8), фактически - легковесная база данных; отслеживание изменений в нём бесполезно, а слияние изменений - сделанных двумя людьми - невозможно, поэтому вы вряд ли захотите обрабатывать его как текстовый файл.
Файл предназначен для чтения машиной, а не человеком. 
Вот почему его следует рассматривать как бинарный.

Чтобы Git начал обрабатывать все `pbxproj` файлы как бинарные, добавьте в файл `.gitattributes` следующую строку:

[source]
----
*.pbxproj binary
----

Теперь, Git не будет конвертировать или исправлять CRLF в этом файле; не будет пытаться определить изменения или выводить их на экран при выполнении команд `git show` или `git diff`.

===== Сравнение бинарных файлов

Возможности атрибуты Git так же можно использовать для эфективного сравнения бинарных файлов.
Сделать это можно указав Git каким образом конвертировать бинарные данные в текстовый формат, чтобы затем сравнить их обычным способом.

Этот подход решает одну из самых досадных проблем, известных человечеству: контроль версий документов Microsoft Word.
Все уже знают, что Word - самый ужасный редактор из всех, но, как ни странно, продолжают его использовать.
Если вы хотите контролировать версии документов Word, то поместите их в Git репозиторий и периодически делайте коммиты; но как это решает проблему?
Если вы просто выполните команду `git diff`, то увидите следующее:

[source,console]
----
$ git diff
diff --git a/chapter1.docx b/chapter1.docx
index 88839c4..4afcb7c 100644
Binary files a/chapter1.docx and b/chapter1.docx differ
----

Нельзя просто взять и сравнить два файла не читая их и не сравнивая вручную, так?
Это становится возможным при использовании атрибутов Git.
Добавьте в файл `.gitattributes` следующую строку:

[source]
----
*.docx diff=word
----

Это говорит Git, что нужно использовать фильтр  ``word'' при просмотре изменений файлов, соответствующих шаблону `.docx`.
Что такое ``word'' фильтр?
Вам следует его настроить.
Нужно сконфигурировать Git на использование программы `docx2txt` для конвертации документов Word в текстовые, которые можно корректно сравнивать.

Для начала, нужно установить программу `docx2txt`; вы можете скачать её здесь http://docx2txt.sourceforge.net[]. Следуйте инструкциям из файла `INSTALL` для её установки и настройки запуска из командной строки.
Затем следует написать скрипт обёртку для конвертации вывода программы в формат, понятный Git.
Создайте файл `docx2txt` в любом доступном для запуска месте и добавьте в него следующее содержимое (прим. пер.: применимо для Linux и Mac):

[source,console]
----
#!/bin/bash
docx2txt.pl $1 -
----

Не забудьте добавить права запуска для созданного файла.
Наконец, настройте Git на использование созданного скрипта:

[source,console]
----
$ git config diff.word.textconv docx2txt
----

Теперь Git знает, что при сравнении снапшотов содержимое файлов `.docx` должно быть предварительно обработано фильтром ``word'', который определен в программе `docx2txt`.
Для каждого файла Word создаётся его текстовая версия.

Для примера, первый раздел этой книги был сохранен в формате Word и добавлен в Git репозиторий.
Затем был добавлен новый абзац.
Вот что покажет команда `git diff`:

[source,console]
----
$ git diff
diff --git a/chapter1.docx b/chapter1.docx
index 0b013ca..ba25db5 100644
--- a/chapter1.docx
+++ b/chapter1.docx
@@ -2,6 +2,7 @@
 This chapter will be about getting started with Git. We will begin at the beginning by explaining some background on version control tools, then move on to how to get Git running on your system and finally how to get it setup to start working with. At the end of this chapter you should understand why Git is around, why you should use it and you should be all setup to do so.
 1.1. About Version Control
 What is "version control", and why should you care? Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later. For the examples in this book you will use software source code as the files being version controlled, though in reality you can do this with nearly any type of file on a computer.
+Testing: 1, 2, 3.
 If you are a graphic or web designer and want to keep every version of an image or layout (which you would most certainly want to), a Version Control System (VCS) is a very wise thing to use. It allows you to revert files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more. Using a VCS also generally means that if you screw things up or lose files, you can easily recover. In addition, you get all this for very little overhead.
 1.1.1. Local Version Control Systems
 Many people's version-control method of choice is to copy files into another directory (perhaps a time-stamped directory, if they're clever). This approach is very common because it is so simple, but it is also incredibly error prone. It is easy to forget which directory you're in and accidentally write to the wrong file or copy over files you don't mean to.
----

Git сообщает нам, что была добавлена строка ``Testing: 1, 2, 3.''.
Решение не идеальное - изменения форматирования не отображаются - но работает.

Проблему сравнения файлов изображений можно решить аналогичным образом.
Один из способов реализации заключается в передаче изображения на фильтр для извлечения EXIF информации - метаданных, которые сохраняются для большинства форматов изображений.
Скачав и установив программу `exiftool`, вы сможете использовать её для сравнения изменений метаданных изображения:

[source,console]
----
$ echo '*.png diff=exif' >> .gitattributes
$ git config diff.exif.textconv exiftool
----

Заменив картинку и выполнив команду `git diff`, вы увидите что-то похожее:

[source]
----
diff --git a/image.png b/image.png
index 88839c4..4afcb7c 100644
--- a/image.png
+++ b/image.png
@@ -1,12 +1,12 @@
 ExifTool Version Number         : 7.74
-File Size                       : 70 kB
-File Modification Date/Time     : 2009:04:21 07:02:45-07:00
+File Size                       : 94 kB
+File Modification Date/Time     : 2009:04:21 07:02:43-07:00
 File Type                       : PNG
 MIME Type                       : image/png
-Image Width                     : 1058
-Image Height                    : 889
+Image Width                     : 1056
+Image Height                    : 827
 Bit Depth                       : 8
 Color Type                      : RGB with Alpha
----

Легко заметить, что размеры изображения и файла изменились.

[[r_keyword_expansion]]
==== Keyword Expansion

(((keyword expansion)))
SVN- or CVS-style keyword expansion is often requested by developers used to those systems.
The main problem with this in Git is that you can't modify a file with information about the commit after you've committed, because Git checksums the file first.
However, you can inject text into a file when it's checked out and remove it again before it's added to a commit.
Git attributes offers you two ways to do this.

First, you can inject the SHA-1 checksum of a blob into an `$Id$` field in the file automatically.
If you set this attribute on a file or set of files, then the next time you check out that branch, Git will replace that field with the SHA-1 of the blob.
It's important to notice that it isn't the SHA-1 of the commit, but of the blob itself:

[source,console]
----
$ echo '*.txt ident' >> .gitattributes
$ echo '$Id$' > test.txt
----

The next time you check out this file, Git injects the SHA-1 of the blob:

[source,console]
----
$ rm test.txt
$ git checkout -- test.txt
$ cat test.txt
$Id: 42812b7653c7b88933f8a9d6cad0ca16714b9bb3 $
----

However, that result is of limited use.
If you've used keyword substitution in CVS or Subversion, you can include a datestamp – the SHA-1 isn't all that helpful, because it's fairly random and you can't tell if one SHA-1 is older or newer than another just by looking at them.

It turns out that you can write your own filters for doing substitutions in files on commit/checkout.
These are called ``clean'' and ``smudge'' filters.
In the `.gitattributes` file, you can set a filter for particular paths and then set up scripts that will process files just before they're checked out (``smudge'', see <<rfilters_a>>) and just before they're staged (``clean'', see <<rfilters_b>>).
These filters can be set to do all sorts of fun things.

[[rfilters_a]]
.The ``smudge'' filter is run on checkout.
image::images/smudge.png[The ``smudge'' filter is run on checkout.]

[[rfilters_b]]
.The ``clean'' filter is run when files are staged.
image::images/clean.png[The ``clean'' filter is run when files are staged.]

The original commit message for this feature gives a simple example of running all your C source code through the `indent` program before committing.
You can set it up by setting the filter attribute in your `.gitattributes` file to filter `*.c` files with the ``indent'' filter:

[source]
----
*.c filter=indent
----

Then, tell Git what the ``indent'' filter does on smudge and clean:

[source,console]
----
$ git config --global filter.indent.clean indent
$ git config --global filter.indent.smudge cat
----

In this case, when you commit files that match `*.c`, Git will run them through the indent program before it stages them and then run them through the `cat` program before it checks them back out onto disk.
The `cat` program does essentially nothing: it spits out the same data that it comes in.
This combination effectively filters all C source code files through `indent` before committing.

Another interesting example gets `$Date$` keyword expansion, RCS style.
To do this properly, you need a small script that takes a filename, figures out the last commit date for this project, and inserts the date into the file.
Here is a small Ruby script that does that:

[source,ruby]
----
#! /usr/bin/env ruby
data = STDIN.read
last_date = `git log --pretty=format:"%ad" -1`
puts data.gsub('$Date$', '$Date: ' + last_date.to_s + '$')
----

All the script does is get the latest commit date from the `git log` command, stick that into any `$Date$` strings it sees in stdin, and print the results – it should be simple to do in whatever language you're most comfortable in.
You can name this file `expand_date` and put it in your path.
Now, you need to set up a filter in Git (call it `dater`) and tell it to use your `expand_date` filter to smudge the files on checkout.
You'll use a Perl expression to clean that up on commit:

[source,console]
----
$ git config filter.dater.smudge expand_date
$ git config filter.dater.clean 'perl -pe "s/\\\$Date[^\\\$]*\\\$/\\\$Date\\\$/"'
----

This Perl snippet strips out anything it sees in a `$Date$` string, to get back to where you started.
Now that your filter is ready, you can test it by setting up a file with your `$Date$` keyword and then setting up a Git attribute for that file that engages the new filter:

[source,console]
----
$ echo '# $Date$' > date_test.txt
$ echo 'date*.txt filter=dater' >> .gitattributes
----

If you commit those changes and check out the file again, you see the keyword properly substituted:

[source,console]
----
$ git add date_test.txt .gitattributes
$ git commit -m "Testing date expansion in Git"
$ rm date_test.txt
$ git checkout date_test.txt
$ cat date_test.txt
# $Date: Tue Apr 21 07:26:52 2009 -0700$
----

You can see how powerful this technique can be for customized applications.
You have to be careful, though, because the `.gitattributes` file is committed and passed around with the project, but the driver (in this case, `dater`) isn't, so it won't work everywhere.
When you design these filters, they should be able to fail gracefully and have the project still work properly.

==== Exporting Your Repository

(((archiving)))
Git attribute data also allows you to do some interesting things when exporting an archive of your project.

===== `export-ignore`

You can tell Git not to export certain files or directories when generating an archive.
If there is a subdirectory or file that you don't want to include in your archive file but that you do want checked into your project, you can determine those files via the `export-ignore` attribute.

For example, say you have some test files in a `test/` subdirectory, and it doesn't make sense to include them in the tarball export of your project.
You can add the following line to your Git attributes file:

[source]
----
test/ export-ignore
----

Now, when you run git archive to create a tarball of your project, that directory won't be included in the archive.

===== `export-subst`

Another thing you can do for your archives is some simple keyword substitution.
Git lets you put the string `$Format:$` in any file with any of the `--pretty=format` formatting shortcodes, many of which you saw in Chapter 2.
For instance, if you want to include a file named `LAST_COMMIT` in your project, and the last commit date was automatically injected into it when `git archive` ran, you can set up the file like this:

[source,console]
----
$ echo 'Last commit date: $Format:%cd$' > LAST_COMMIT
$ echo "LAST_COMMIT export-subst" >> .gitattributes
$ git add LAST_COMMIT .gitattributes
$ git commit -am 'adding LAST_COMMIT file for archives'
----

When you run `git archive`, the contents of that file when people open the archive file will look like this:

[source,console]
----
$ cat LAST_COMMIT
Last commit date: $Format:Tue Apr 21 08:38:48 2009 -0700$
----

==== Merge Strategies

(((merging, strategies)))
You can also use Git attributes to tell Git to use different merge strategies for specific files in your project.
One very useful option is to tell Git to not try to merge specific files when they have conflicts, but rather to use your side of the merge over someone else's.

This is helpful if a branch in your project has diverged or is specialized, but you want to be able to merge changes back in from it, and you want to ignore certain files.
Say you have a database settings file called `database.xml` that is different in two branches, and you want to merge in your other branch without messing up the database file.
You can set up an attribute like this:

[source]
----
database.xml merge=ours
----

And then define a dummy `ours` merge strategy with:

[source,console]
----
$ git config --global merge.ours.driver true
----

If you merge in the other branch, instead of having merge conflicts with the `database.xml` file, you see something like this:

[source,console]
----
$ git merge topic
Auto-merging database.xml
Merge made by recursive.
----

In this case, `database.xml` stays at whatever version you originally had.

==== Git и Bazaar

Ещё одна известная ДСКВ http://bazaar.canonical.com[Bazaar].
Bazaar - это бесплатная система с открытым исходным кодом, являющаяся частью проекта https://www.gnu.org[GNU Project].
Её поведение сильно отличается от Git.
Иногда, чтобы сделать тоже самое, что и в Git, следует использовать другое ключевое слово, а некоторые такие же ключевые слова имеюют разное значение.
В частности, управления ветками сильно отличается и может вызвать путаницу, особенно для кого-нибудь из вселенной Git.
Тем не менее, с Bazaar репозторием возможно работать из Git.

Существует много проектов, которые позволяют использовать Git как клиент Bazaar.
Далее, мы будем использовать проект Филипа Контрераса, который можно найти здесь https://github.com/felipec/git-remote-bzr[].
Для установки достаточно просто скачать файл git-remote-bzr и поместить его в одну из директорий в вашем `$PATH`:
[source,console]
----
$ wget https://raw.github.com/felipec/git-remote-bzr/master/git-remote-bzr -O ~/bin/git-remote-bzr
$ chmod +x ~/bin/git-remote-bzr
----

Так же вам понадобится установленный Bazaar.
И всё!

===== Создание репозитория Git из репозитория Bazaar

Им просто пользоваться.
Чтобы склонировать Bazaar репозиторий достаточно добавить префикс `bzr::`.
Так как Git и Bazaar полностью клонируют репозиторий на ваш компьютер, то можно добавить клон Git к локальному клону Bazaar, но так делать не рекомендуется.
Гораздо проще связать клон Git с центральным хранилищем - тем же местом, с которым связан клон Bazaar.

Предположим, что вы работали с удаленным репозиторием, находящимся по адресу `bzr+ssh://developer@mybazaarserver:myproject`.
Чтобы его склонировать, нужно выполнить следующие команды:

[source,console]
----
$ git clone bzr::bzr+ssh://developer@mybazaarserver:myproject myProject-Git
$ cd myProject-Git
----

На текущий момент, созданный Git репозиторий использует дисковое пространство не оптимально.
Поэтому вы должны очистить и сжать его, особенно если репозиторий большого размера:

[source,console]
----
$ git gc --aggressive
----

===== Ветки в Bazaar

Bazaar позволяет клонировать только ветки, при этом репозиторий может содержать их несколько, а `git-remote-bzr` может клонировать все.
Например, чтобы склонировать ветку выполните:
[source,console]
----
$ git clone bzr::bzr://bzr.savannah.gnu.org/emacs/trunk emacs-trunk
----

Чтобы склонировать весь репозиторий, выполните команду:

[source,console]
----
$ git clone bzr::bzr://bzr.savannah.gnu.org/emacs emacs
----

Последняя команда клонирует все ветки репозитория emacs; тем не менее, конфигурацией допускается указывать только некоторые из них:

[source,console]
----
$ git config remote-bzr.branches 'trunk, xwindow'
----

Некоторые удаленные репозитории не позволяют просматривать список веток, поэтому их перечисление в конфигурации для команды клонирования может оказаться проще в использовании:

[source,console]
----
$ git init emacs
$ git remote add origin bzr::bzr://bzr.savannah.gnu.org/emacs
$ git config remote-bzr.branches 'trunk, xwindow'
$ git fetch
----

===== Игнорируем то, что игнорируется в .bzrignore

При работе с проектом под управлением Bazaar вы не должны создавать файл `.gitignore`, потому что можете случайно добавить его в отслеживаемые, чем могут возмутиться другие пользователи, работающие с Bazaar.
Решением может выступать создание файла `.git/info/exclude`, который может быть как символической ссылкой, так и обычным файлом.
Позже мы рассмотрим пример решения этой проблемы.

Bazaar использует ту же модель игнорирования файлов что и Git, за исключением двух особенностей, не имеющих эквивалента в Git.
Полное описание можно найти в http://doc.bazaar.canonical.com/bzr.2.7/en/user-reference/ignore-help.html[документации].
Функциональные отличия следующие:

1. "!!" позволяет игнорировать определенные шаблоны файлов, даже если они указаны со знаком "!"
2. "RE:" в начале строки позволяет указать https://docs.python.org/3/library/re.html[регулярное выражение Python]. (Git допускает только шаблоны оболочки).

Следовательно, возможны две ситуации:

1. Если файл `.bzrignore` не содержит специфических префиксов, то можно просто создать символическую ссылку на него: `ln -s .bzrignore .git/info/exclude`
2. Иначе, нужно создать файл `.git/info/exclude` и адаптировать его в соответствии с `.bzrignore` так, чтобы игнорировались те же файлы.

Вне зависимости от ситуации, вам нужно следить за изменениями в `.bzrignore`, чтобы файл `.git/info/exclude` всегда соответствовал `.bzrignore`.
На самом деле, если в файл `.bzrignore` будут добавлены изменения в виде одной или нескольких строк с "!!" или "RE:" вначале, то Git просто не сможет их интерпретировать и вам понадобиться изменить файл `.git/info/exclude` так, чтобы игнорировались те же файлы.
Более того, если файл `.git/info/exclude` был символической ссылкой, то сначала нужно его удалить, скопировать `.bzrignore` в `.git/info/exclude` и адаптировать последний.
Однако, будьте осторожны с его созданием, потому что в Git невозможно повторно включить файл в индекс, если исключен родительский каталог этого файла.

===== Получение изменений с удаленного репозитория

Используя обычные команды Git можно получить изменения с удаленного репозитория.
Предположим, что изменения находятся в ветке `master`, вы сливаете или перебазируете свою работу относительно ветки `origin/master`:
[source,console]
----
$ git pull --rebase origin
----

===== Отправка в удаленный репозиторий

Поскольку Bazaar так же имеет концепцию коммитов слияния, то проблем не возникнет при отправке такого коммита.
Таким образом, вы можете работать в ветке, сливать изменения в `master` и отправлять их.
Вы можете создавать ветки, делать коммиты и тестировать изменения как обычно.
Наконец, вы отправлете проделанную работу в репозиторий Bazaar:
[source,console]
----
$ git push origin master
----

===== Caveats

Git's remote-helpers framework has some limitations that apply.
In particular, these commands don't work:

* git push origin :branch-to-delete (Bazaar can't accept ref deletions in this way.)
* git push origin old:new (it will push 'old')
* git push --dry-run origin branch (it will push)

===== Summary

Since Git's and Bazaar's models are similar, there isn't a lot of resistance when working across the boundary.
As long as you watch out for the limitations, and are always aware that the remote repository isn't natively Git, you'll be fine.

[[r_git_svn]]
==== Git и Subversion

(((Subversion)))(((Interoperation with other VCSs, Subversion)))
Весомая часть проектов с исходным кодом, равно как и огромное количество корпоративных проектов, до сих пор используют Subversion для версионирования исходного кода.
SVN'у больше десяти лет и большую часть этого срока он оставался _единственным_ вариантом СКВ для проектов с открытым исходным кодом.
SVN очень похож на CVS, своего предка -- "крёстного отца" всех современных СКВ.

(((git commands, svn)))(((git-svn)))
Одна из многих замечательных вещей в Git -- это поддержка двусторонней интеграции с SVN через `git svn`.
Этот инструмент позволяет использовать Git в качестве полноценного SVN клиента; вы можете использовать всю функциональность Git для работы с локальным репозиторием, скомпоновать ревизии и отправить их на сервер, словно вы использовали обычный SVN.
Да, вы не ослышались: можно создавать локальные ветки, производить слияния, использовать индекс для неполного применения изменений, перемещать коммиты и повторно применять их (cherry-pick) и т.д., в то время как ваши коллеги, использующие SVN, застряли в палеолите.
Это отличный способ по-партизански внедрить Git в процесс разработки и помочь соратниками стать более продуктивными, а затем потребовать от инфраструктуры полной поддержки Git.
`git svn` -- это первый укол наркотика "РСКВ", вызывающего сильнейшее привыкание.

===== `git svn`

Основная команда для работы с Subversion -- это `git svn`.
Она принимает несколько дополнительных команд, которые мы рассмотрим далее.

Важно понимать, что каждый раз, когда вы используете `git svn`, вы взаимодействуете с Subversion, который работает совсем не как Git.
И хотя вы *можете* создавать и сливать локальные ветки, всё же лучше сохранять историю линейной настолько, насколько это возможно, используя перемещение коммитов.
Также избегайте одновременной работы с удалённым Git сервером.

Не изменяйте уже опубликованную историю, и не зеркалируйте изменения в Git репозитории, с которым работают люди, использующие Git (они могут изменить историю).
В Subversion может быть только одна линейная история коммитов.
Если в вашей команде часть людей использует SVN, а часть -- Git, убедитесь, что все используют SVN сервер для сотрудничества.
Это сделает вашу жизнь проще.

===== Установка

Чтобы попробовать `git svn` в деле вам понадобится обычный SVN репозиторий с правом на запись.
Если вы хотите попробовать примеры ниже, вам понадобится копия нашего тестового репозитория.
К счастью, в Subversion есть инструмент `svnsync`, который упростит перенос.
Для тестов мы создали новый Subversion репозиторий на Google Code, являющийся частичной копией проекта `protobuf` -- библиотеки для сериализации структурированных данных для передачи по сети.

Если вы с нами, создайте локальный Subversion репозиторий:

[source,console]
----
$ mkdir /tmp/test-svn
$ svnadmin create /tmp/test-svn
----

Затем, позвольте всем пользователям изменять т.н. `revprops`; самый простой способ сделать это -- добавить скрипт `pre-revprop-change`, всегда возвращающий 0:

[source,console]
----
$ cat /tmp/test-svn/hooks/pre-revprop-change
#!/bin/sh
exit 0;
$ chmod +x /tmp/test-svn/hooks/pre-revprop-change
----

Теперь вы можете синхронизировать репозиторий на локальной машине, вызвав `svnsync init`, передав входной и выходной репозитории:

[source,console]
----
$ svnsync init file:///tmp/test-svn \
  http://progit-example.googlecode.com/svn/
----

Наконец (SVN вам ещё не надоел?), можно запустить саму синхронизацию.
Затем можно будет склонировать собственно код, выполнив:

[source,console]
----
$ svnsync sync file:///tmp/test-svn
Committed revision 1.
Copied properties for revision 1.
Transmitting file data .............................[...]
Committed revision 2.
Copied properties for revision 2.
[…]
----

На всё про всё у вас уйдёт несколько минут, но на самом деле вам ещё повезло: если бы вы копировали данные не на свой компьютер, а в другой удалённый репозиторий, понадобился бы почти час, несмотря на то, что в тестовом проекте меньше сотни ревизий.
Subversion копирует данные последовательно, скачивая по одной ревизии и отправляя в другой репозиторий -- это поразительно неэффективно, но как есть, так есть.

===== Начало работы

Теперь, когда у вас есть Subversion репозиторий с правами на запись, можно опробовать типичные приёмы работы с ним через `git svn`
Начнём с команды `git svn clone`, которая склонирует Subversion репозиторий целиком в локальный Git репозиторий.
Разумеется, при переносе реального Subversion репозитория нужно будет заменить `file:///tmp/test-svn` на настоящий URL:

[source,console]
----
$ git svn clone file:///tmp/test-svn -T trunk -b branches -t tags
Initialized empty Git repository in /private/tmp/progit/test-svn/.git/
r1 = dcbfb5891860124cc2e8cc616cded42624897125 (refs/remotes/origin/trunk)
    A	m4/acx_pthread.m4
    A	m4/stl_hash.m4
    A	java/src/test/java/com/google/protobuf/UnknownFieldSetTest.java
    A	java/src/test/java/com/google/protobuf/WireFormatTest.java
…
r75 = 556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae (refs/remotes/origin/trunk)
Found possible branch point: file:///tmp/test-svn/trunk => file:///tmp/test-svn/branches/my-calc-branch, 75
Found branch parent: (refs/remotes/origin/my-calc-branch) 556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae
Following parent with do_switch
Successfully followed parent
r76 = 0fb585761df569eaecd8146c71e58d70147460a2 (refs/remotes/origin/my-calc-branch)
Checked out HEAD:
  file:///tmp/test-svn/trunk r75
----

Приведённая выше команда является композицией двух других -- `git svn init` и `git svn fetch` для указанного URL.
Процесс копирования займёт некоторое время.
Тестовый проект невелик -- всего 75 коммитов -- но Git вынужден последовательно скачивать SVN ревизии и превращать их в Git коммиты по одной за раз.
Для проекта с сотней или тысячей ревизий это может занять часы или даже дни!

Параметры `-T trunk -b branches -t tags` говорят Git о том, что клонируемый репозиторий следует стандартному, принятому в Subversion, расположению директорий с транком, ветками и метками.
Если же директории названы по-другому, можно указать их явно, используя эти параметры.
Большинство Subversion репозиториев следуют этому соглашению, поэтому для этой комбинации параметров существует сокращение `-s`, что означает "стандартное расположение директорий"
Следующая команда эквивалентна приведённой выше:

[source,console]
----
$ git svn clone file:///tmp/test-svn -s
----

На этом этапе у вас должен быть обычный Git репозиторий с импортированными ветками и метками:

[source,console]
----
$ git branch -a
* master
  remotes/origin/my-calc-branch
  remotes/origin/tags/2.0.2
  remotes/origin/tags/release-2.0.1
  remotes/origin/tags/release-2.0.2
  remotes/origin/tags/release-2.0.2rc1
  remotes/origin/trunk
----

Обратите внимание, как `git svn` представляет метки Subversion в виде ссылок.
(((git commands, show-ref)))
Давайте посмотрим на это повнимательней, используя команду `show-ref`:

[source,console]
----
$ git show-ref
556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae refs/heads/master
0fb585761df569eaecd8146c71e58d70147460a2 refs/remotes/origin/my-calc-branch
bfd2d79303166789fc73af4046651a4b35c12f0b refs/remotes/origin/tags/2.0.2
285c2b2e36e467dd4d91c8e3c0c0e1750b3fe8ca refs/remotes/origin/tags/release-2.0.1
cbda99cb45d9abcb9793db1d4f70ae562a969f1e refs/remotes/origin/tags/release-2.0.2
a9f074aa89e826d6f9d30808ce5ae3ffe711feda refs/remotes/origin/tags/release-2.0.2rc1
556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae refs/remotes/origin/trunk
----

При работе с Git репозиторием Git поступает иначе, вот как выглядит Git репозиторий сразу после клонирования:

[source,console]
----
$ git show-ref
c3dcbe8488c6240392e8a5d7553bbffcb0f94ef0 refs/remotes/origin/master
32ef1d1c7cc8c603ab78416262cc421b80a8c2df refs/remotes/origin/branch-1
75f703a3580a9b81ead89fe1138e6da858c5ba18 refs/remotes/origin/branch-2
23f8588dde934e8f33c263c6d8359b2ae095f863 refs/tags/v0.1.0
7064938bd5e7ef47bfd79a685a62c1e2649e2ce7 refs/tags/v0.2.0
6dcb09b5b57875f334f61aebed695e2e4193db5e refs/tags/v1.0.0
----

Заметили?
Git помещает метки прямиком в `refs/tags`, но в случае с Subversion репозиторием они трактуются как удалённые ветки.

===== Отправка изменений в Subversion

Теперь, когда вы настроили репозиторий, можно проделать некую работу и отправить изменения обратно в Subversion, используя Git как SVN клиент.
Если вы отредактируете какой-либо файл и зафиксируете изменения, полученный коммит будет существовать в локальном Git репозитории, но не на сервере Subversion.

[source,console]
----
$ git commit -am 'Adding git-svn instructions to the README'
[master 4af61fd] Adding git-svn instructions to the README
 1 file changed, 5 insertions(+)
----

Далее следует отправить изменения на сервер.
Обратите внимание как это меняет привычный сценарий работы с Subversion: вы фиксируете изменения без связи с сервером, а затем отправляете их все при удобном случае.
Чтобы отправить изменения на Subversion сервер, следует выполнить команду `git svn dcommit`:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	README.txt
Committed r77
    M	README.txt
r77 = 95e0222ba6399739834380eb10afcd73e0670bc5 (refs/remotes/origin/trunk)
No changes between 4af61fd05045e07598c553167e0f31c84fd6ffe1 and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk
----

Эта команда берёт все изменения, зафиксированные поверх последних ревизий с Subversion сервера, создаёт для каждого новую Subversion ревизию, а затем переписывает их, добавляя уникальный идентификатор.
Это важно, потому что изменяются SHA-1 хеши коммитов.
Это одна из причин, почему не рекомендуется смешивать Subversion и Git сервер в одном проекте.
Если посмотреть на последний коммит, вы увидите, что добавилась строка `git-svn-id`:

[source,console]
----
$ git log -1
commit 95e0222ba6399739834380eb10afcd73e0670bc5
Author: ben <ben@0b684db3-b064-4277-89d1-21af03df0a68>
Date:   Thu Jul 24 03:08:36 2014 +0000

    Adding git-svn instructions to the README

    git-svn-id: file:///tmp/test-svn/trunk@77 0b684db3-b064-4277-89d1-21af03df0a68
----

Обратите внимание, что SHA-1 хеш, прежде начинавшийся с `4af61fd`, теперь начинается с `95e0222`.
Если всё же хотите работать как с Git, так и с Subversion серверами в одном проекте, сначала следует отправлять (`dcommit`) изменения на Subversion сервер, так как это изменяет хеши.

===== Получение новых изменений

Если вы работаете в команде, рано или поздно кто-то успеет отправить изменения раньше вас и вы не сможете отправить свои изменения на сервер не разрешив возникший конфликт.
Ваши коммиты будут попросту отвергаться сервером, пока вы не произведёте слияние.
В `git svn` это выглядит следующим образом:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...

ERROR from SVN:
Transaction is out of date: File '/trunk/README.txt' is out of date
W: d5837c4b461b7c0e018b49d12398769d2bfc240a and refs/remotes/origin/trunk differ, using rebase:
:100644 100644 f414c433af0fd6734428cf9d2a9fd8ba00ada145 c80b6127dd04f5fcda218730ddf3a2da4eb39138 M	README.txt
Current branch master is up to date.
ERROR: Not all changes have been committed into SVN, however the committed
ones (if any) seem to be successfully integrated into the working tree.
Please see the above messages for details.
----

Чтобы решить эту проблему запустите `git svn rebase`, которая заберёт все ревизии с сервера, которых у вас пока нет, и переместит (rebase) ваши локальные наработки на них:

[source,console]
----
$ git svn rebase
Committing to file:///tmp/test-svn/trunk ...

ERROR from SVN:
Transaction is out of date: File '/trunk/README.txt' is out of date
W: eaa029d99f87c5c822c5c29039d19111ff32ef46 and refs/remotes/origin/trunk differ, using rebase:
:100644 100644 65536c6e30d263495c17d781962cfff12422693a b34372b25ccf4945fe5658fa381b075045e7702a M	README.txt
First, rewinding head to replay your work on top of it...
Applying: update foo
Using index info to reconstruct a base tree...
M	README.txt
Falling back to patching base and 3-way merge...
Auto-merging README.txt
ERROR: Not all changes have been committed into SVN, however the committed
ones (if any) seem to be successfully integrated into the working tree.
Please see the above messages for details.
----

Теперь история линейна и вы можете успешно выполнить `dcommit`:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	README.txt
Committed r85
    M	README.txt
r85 = 9c29704cc0bbbed7bd58160cfb66cb9191835cd8 (refs/remotes/origin/trunk)
No changes between 5762f56732a958d6cfda681b661d2a239cc53ef5 and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk
----

В отличие от Git, всегда требующего производить слияние свежих изменений из удалённого репозитория с локальными наработками, перед отправкой на сервер, `git svn` требует слияний только в случае конфликтующих изменений (так работает Subversion).
Если кто-нибудь изменил один файл, а затем вы изменяете другой, `dcommit` сработает гладко:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	configure.ac
Committed r87
    M	autogen.sh
r86 = d8450bab8a77228a644b7dc0e95977ffc61adff7 (refs/remotes/origin/trunk)
    M	configure.ac
r87 = f3653ea40cb4e26b6281cec102e35dcba1fe17c4 (refs/remotes/origin/trunk)
W: a0253d06732169107aa020390d9fefd2b1d92806 and refs/remotes/origin/trunk differ, using rebase:
:100755 100755 efa5a59965fbbb5b2b0a12890f1b351bb5493c18 e757b59a9439312d80d5d43bb65d4a7d0389ed6d M	autogen.sh
First, rewinding head to replay your work on top of it...
----

Важно помнить про это, потому что в результате такого поведения вы получаете непредсказуемое состояние проекта, до этого не существовавшее ни на одном из компьютеров.
Если изменения были несовместимы между собой, но не вызывали конфликта слияния (например, логически противоречивые изменения в разных файлах) в результате подобного произвола могут возникнуть труднодиагностируемые проблемы.
С Git сервером дела обстоят иначе: перед отправкой изменений в удалённый репозиторий вы можете полностью протестировать проект локально, в то время как в Subversion вы не можете быть уверенными, что состояние проекта до и после коммита было одинаковым.

Даже если вы не готовы зафиксировать собственные изменения, следует почаще забирать изменения с Subversion сервера.
Для синхронизации можно использовать `git svn fetch`, или `git svn rebase`; последняя команда не только забирает все изменения из Subversion, но и переносит ваши локальные коммиты наверх.

[source,console]
----
$ git svn rebase
    M	autogen.sh
r88 = c9c5f83c64bd755368784b444bc7a0216cc1e17b (refs/remotes/origin/trunk)
First, rewinding head to replay your work on top of it...
Fast-forwarded master to refs/remotes/origin/trunk.
----

Выполнение `git svn rebase` актуализирует состояние локального репозитория.
Для выполнения этой команды ваша рабочая директория не должна содержать незафиксированных изменений.
Если это не так, вам следует либо "спрятать" (stash) свои наработки, либо на время зафиксировать: иначе `git svn rebase` прекратит выполнение в случае конфликта.

===== Проблемы с Git-ветвлением

После того как вы привыкните к Git, вам понравится создавать тематические ветки, работать в них и сливать их основную ветку разработки.
Если работаете с Subversion сервером через `git svn`, вам придётся перемещать изменения, а не проводить слияния.
Причина кроется в линейности истории в Subversion -- в нём принята несколько иная концепция ветвления и слияния -- так что `git svn` учитывает лишь первого родителя любого коммита при преобразовании её в SVN формат.

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	CHANGES.txt
Committed r89
    M	CHANGES.txt
r89 = 89d492c884ea7c834353563d5d913c6adf933981 (refs/remotes/origin/trunk)
    M	COPYING.txt
    M	INSTALL.txt
Committed r90
    M	INSTALL.txt
    M	COPYING.txt
r90 = cb522197870e61467473391799148f6721bcf9a0 (refs/remotes/origin/trunk)
No changes between 71af502c214ba13123992338569f4669877f55fd and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk
----

Выполнение команды `dcommit` на ветке с уже слитой историй пройдёт успешно, за исключением того момента, что при просмотре истории вы заметите, что коммита из ветки `experiment` не были переписаны один за другим; вместо этого они схлопнулись в один коммит слияния.

Когда кто-нибудь склонирует этот репозиторий, всё что он увидит -- единственное слияние, в котором собраны все изменения, словно вы выполнили `git merge --squash`; они не увидят кто и когда производил коммиты.

===== Subversion-ветвление

Итак, ветвление в Subversion отличается от оного в Git; используйте его как можно реже.
Тем не менее, используя `git svn`, вы можете создавать Subversion-ветки и фиксировать изменения в них.

===== Создание новых SVN-веток

Чтобы создать новую ветку в Subversion, выполните `git svn branch [имя ветки]`:

[source,console]
----
$ git svn branch opera
Copying file:///tmp/test-svn/trunk at r90 to file:///tmp/test-svn/branches/opera...
Found possible branch point: file:///tmp/test-svn/trunk => file:///tmp/test-svn/branches/opera, 90
Found branch parent: (refs/remotes/origin/opera) cb522197870e61467473391799148f6721bcf9a0
Following parent with do_switch
Successfully followed parent
r91 = f1b64a3855d3c8dd84ee0ef10fa89d27f1584302 (refs/remotes/origin/opera)
----

Это эквивалентно выполнению команды `svn copy trunk branches/opera` в Subversion, при этом действия совершаются на Subversion сервере.
Обратите внимание, что создание SVN ветки не переключает вас на неё; если сейчас зафиксировать какие-либо изменения и отправить их на сервер, они попадут в ветку `trunk`, а не `opera`.

===== Переключение активных веток

Git определяет ветку, в которую он отправит ваши коммиты при выполнении `dcommit`, ища верхушку Subversion-ветки в вашей истории -- она должна быть одна и она должна быть последней в текущей истории веток, имеющей метку `git-svn-id`.

Если вы хотите работать одновременно с несколькими ветками, вы можете настроить локальные ветки на внесение изменений через `dcommit` в конкретные ветки Subversion, отпочковывая их из импортированных SVN-ревизий нужных веток.
Если вам нужна ветка `opera`, в которой вы можете поработать отдельно, можете выполнить:

[source,console]
----
$ git branch opera remotes/origin/opera
----

Теперь, если вы захотите слить ветку `opera` в `trunk` (`master`), вы сможете сделать это с помощью обычной команды `git merge`.
Однако вам потребуется добавить подробное описание к коммиту (через параметр `-m`), иначе при слиянии комментарий будет иметь вид "Merge branch opera" вместо чего-нибудь полезного.

Помните, что хотя вы и используете `git merge` для этой операции, и слияние, скорее всего, произойдёт намного проще, чем в Subversion (потому что Git автоматически определяет подходящую основу для слияния), оно не является обычным слиянием в Git.
Вы должны передать данные обратно на сервер в Subversion, который не способен справиться с коммитом, имеющим более одного родителя; так что после передачи она будет выглядеть как единое целое, куда будут затолканы все изменения из другой ветки.
После того как вы сольёте одну ветку в другую, вы не сможете просто так вернуться к работе над ней, как могли бы в Git.
Команда `dcommit` удаляет всю информацию о том, какая ветка была влита, так что последующие вычисления базы слияния будут неверными -- команда `dcommit` сделает результаты выполнения `git merge` такими же, какими они были бы после выполнения `git merge --squash`.
К сожалению, избежать подобной ситуации вряд ли удастся: Subversion не способен сохранять подобную информацию, так что вы всегда будете связаны этими ограничениями.
Во избежание проблем вы должны удалить локальную ветку (в нашем случае `opera`) после того, как вы вольёте её в trunk.

===== Команды Subversion

В `git svn` содержится несколько команд для облегчения перехода на Git путём предоставления схожей с Subversion функциональности.
Ниже приведены несколько команд, которые дают вам то, что вы имели в Subversion.

====== Просмотр истории в стиле SVN

Если вы привыкли к Subversion и хотите просматривать историю в стиле SVN, выполните команду `git svn log`, чтобы просматривать историю в таком же формате, как в SVN:

[source,console]
----
$ git svn log
------------------------------------------------------------------------
r87 | schacon | 2014-05-02 16:07:37 -0700 (Sat, 02 May 2014) | 2 lines

autogen change

------------------------------------------------------------------------
r86 | schacon | 2014-05-02 16:00:21 -0700 (Sat, 02 May 2014) | 2 lines

Merge branch 'experiment'

------------------------------------------------------------------------
r85 | schacon | 2014-05-02 16:00:09 -0700 (Sat, 02 May 2014) | 2 lines

updated the changelog
----

Вы должны знать две важные вещи о команде `git svn log`.
Во-первых, для её работы не требуется доступ к сети, в отличие от оригинальной команды `svn log`, которая запрашивает информацию с Subversion сервера.
Во-вторых, эта команда отображает только те коммиты, которые были переданы на Subversion сервер.
Локальные Git коммиты, которые вы ещё не отправили с помощью `dcommit`, не будут отображаться, равно как и коммиты, отправленные на Subversion сервер другими людьми с момента последнего выполнения `dcommit`.
Результат действия этой команды скорее похож на последнее известное состояние изменений на Subversion сервере.

====== SVN-Аннотации

Так же как команда `git svn log` эмулирует команду `svn log`, эквивалентом команды `svn annotate` является команда `git svn blame [ФАЙЛ]`.
Вывод выглядит следующим образом:

[source,console]
----
$ git svn blame README.txt
 2   temporal Protocol Buffers - Google's data interchange format
 2   temporal Copyright 2008 Google Inc.
 2   temporal http://code.google.com/apis/protocolbuffers/
 2   temporal
22   temporal C++ Installation - Unix
22   temporal =======================
 2   temporal
79    schacon Committing in git-svn.
78    schacon
 2   temporal To build and install the C++ Protocol Buffer runtime and the Protocol
 2   temporal Buffer compiler (protoc) execute the following:
 2   temporal
----

Опять же, эта команда не показывает коммиты, которые вы сделали локально в Git или те, что были отправлены на Subversion сервер с момента последней связи с ним.

====== Информация о SVN-сервере

Вы можете получить ту же информацию, которую выдаёт `svn info`, выполнив команду `git svn info`:

[source,console]
----
$ git svn info
Path: .
URL: https://schacon-test.googlecode.com/svn/trunk
Repository Root: https://schacon-test.googlecode.com/svn
Repository UUID: 4c93b258-373f-11de-be05-5f7a86268029
Revision: 87
Node Kind: directory
Schedule: normal
Last Changed Author: schacon
Last Changed Rev: 87
Last Changed Date: 2009-05-02 16:07:37 -0700 (Sat, 02 May 2009)
----

Так же, как `blame` и `log`, эта команда выполняется без доступа к сети и выводит информацию, актуальную на момент последнего обращения к серверу Subversion.

====== Игнорирование того, что игнорирует Subversion

Если вы клонируете Subversion-репозиторий с установленными `svn:ignore` свойствами, скорее всего, вы захотите создать соответствующие им файлы `.gitignore`, чтобы ненароком не зафиксировать лишнего.
Для решения этой проблемы в `git svn` имеется две команды.
Первая -- `git svn create-ignore` -- автоматически создаст соответствующие файлы `.gitignore`, которые вы затем можете зафиксировать.

Вторая команда -- `git svn show-ignore` -- выводит на стандартный вывод строки, которые следует включить в файл `.gitignore`; вы можете попросту перенаправить вывод этой команды в файл исключений:

[source,console]
----
$ git svn show-ignore > .git/info/exclude
----

Поступая таким образом, вы не захламляете проект файлами `.gitignore`.
Это хорошее решение в случае если вы являетесь единственным пользователем Git в команде, использующей Subversion, и ваши коллеги выступают против наличия файлов `.gitignore` в проекте.

===== Заключение по git-svn

Утилиты `git svn` полезны в том случае, если ваша разработка по каким-то причинам требует наличия рабочего Subversion-сервера.
Однако, стоит воспринимать их как "функционально урезанный" Git, ибо при использовании всех возможностей Git вы столкнётесь с проблемами в преобразованиях, которые могут сбить с толку вас и ваших коллег.
Чтобы избежать неприятностей, старайтесь следовать следующим рекомендациям:

* Держите историю в Git линейной, чтобы она не содержала слияний, сделанных с помощью `git merge`.
  Перемещайте всю работу, которую вы выполняете вне основной ветки обратно в неё; не выполняйте слияний.
* Не устанавливайте отдельный Git-сервер для совместной работы.
  Можно иметь такой сервер для того, чтобы ускорить клонирование для новых разработчиков, но не отправляйте на него ничего, не имеющего записи `git-svn-id`.
  Возможно, стоит даже добавить перехватчик `pre-receive`, который будет проверять каждое изменение на наличие `git-svn-id` и отклонять коммиты, если они не имеют такой записи.

При следовании этим правилам, работа с Subversion сервером может быть более-менее сносной.
Однако, если возможен перенос проекта на нормальный Git-сервер, преимущества от этого перехода дадут вашему проекту намного больше.

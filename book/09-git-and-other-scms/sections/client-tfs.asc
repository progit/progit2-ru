==== Git и TFS

(((Interoperation with other VCSs, TFS)))
(((TFS)))((("TFVC", see="TFS")))
Git набирает популярность среди Windows-разработчиков и если вы один из них, то велика вероятность что вы пользовались Microsoft Team Foundation Server (TFS).
TFS — это комплексное решение, включающее в себя систему отслеживание ошибок, систему учёта рабочего времени, решения для поддержки Scrum методологии, инструменты для проведения инспекции кода и собственно систему контроля версий.
Здесь есть небольшая путаница: *TFS* — это сервер, поддерживающий управление версиями как с помощью Git, так и с помощью собственной СКВ — *TFVC* (Team Foundation Version Control).
Поддержка Git появилась в TFS относительно недавно (начиная с 2013-й версии), так что когда идёт речь об управлении версиями в более ранних версиях TFS, имеется в виду именно TFVC.

Если вы оказались в команде, работающей с TFVC, но хотите использовать Git для управления версиями, есть проект, способный вам помочь.

===== Инструменты для работы с TFVC

(((git-tf)))(((git-tfs)))
На самом деле, даже два проекта: `git-tf` и `git-tfs`.

`git-tfs` (расположившийся по адресу https://github.com/git-tfs/git-tfs[]) написан на .NET и (на момент написания этой книги) работает только на Windows.
Он использует .NET привязки для библиотеки libgit2 для работы с Git репозиториями; это очень гибкая и эффективная библиотека, позволяющая выполнять множество низкоуровневых операций с Git репозиторием.
Но libgit2 не полностью покрывает функциональность Git, так что в некоторых случаях `git-tfs` вызывает консольный клиент Git, что делает его возможности по работе с репозиториями практически безграничными.
Поддержка TFVC также впечатляет своей полнотой, ведь `git-tfs` использует "родные" .NET-сборки Visual Studio для работы с сервером.
И это не означает, что вам нужен будет доступ к этим сборкам!
Достаточно лишь установить свежую версию Visual Studio (любую, начиная с 2010-й, включая Express, начиная с 2012-й) или комплект средств разработки для Visual Studio (Visual Studio SDK).

[CAUTION]
----
Git-tf больше не поддерживается компанией Microsoft.
----

`git-tf` (его можно найти на https://archive.codeplex.com/?p=gittf[]) написан на Java и его можно запустить практически на любом компьютере.
Он взаимодействует с Git посредством библиотеки JGit (JVM-имплементация Git), что теоретически означает отсутствие каких-либо ограничение при работе с Git.
К сожалению, поддержка TFVC не так полна, как у `git-tfs`: например, не поддерживаются ветки.

Итак, у каждого из двух проектов есть сильные и слабые стороны и существуют ситуации, в которых один окажется предпочтительнее другого.
В этой книге мы вкратце рассмотрим каждый из них.

[NOTE]
====
Если вы хотите опробовать примеры из книги, вам понадобится доступ к TFVC репозиторию.
Они достаточно редко встречаются на просторах Интернета, возможно, вам придётся создать репозиторий самим.
Можем посоветовать использовать Codeplex (https://www.codeplex.com[]) или Visual Studio Online (http://www.visualstudio.com[]).
====


===== Начало работы: `git-tf`

Как и в большинстве других примеров, первым делом мы клонируем репозиторий.
Вот как это выглядит с использованием `git-tf`:

[source,console]
----
$ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main project_git
----

Первый аргумент — это URL TFVC коллекции, второй представляет собой строку вида `$/project/branch`, и третий — это путь к локальному Git репозиторию, который будет создан (третий параметр опционален).
`git-tf` поддерживает одновременную работу только с одной веткой; если вы хотите работать с разными TFVC ветками, вам потребуется несколько копий репозитория.

Приведённая выше команда создаёт обыкновенный Git репозиторий:

[source,console]
----
$ cd project_git
$ git log --all --oneline --decorate
512e75a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Checkin message
----

Это так называемая _поверхностная_ копия, что означает, что в ней есть только последняя ревизия проекта.
TFVC не предусматривает наличия полной копии репозитория на каждом клиенте, так что `git-tf` по умолчанию скачивает лишь последнюю ревизию, что намного быстрее.

Если вы никуда не торопитесь, можно выкачать и полную историю проекта, используя опцию `--deep`:

[source,console]
----
$ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main \
  project_git --deep
Username: domain\user
Password:
Connecting to TFS...
Cloning $/myproject into /tmp/project_git: 100%, done.
Cloned 4 changesets. Cloned last changeset 35190 as d44b17a
$ cd project_git
$ git log --all --oneline --decorate
d44b17a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Goodbye
126aa7b (tag: TFS_C35189)
8f77431 (tag: TFS_C35178) FIRST
0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
        Team Project Creation Wizard
----

Обратите внимание на метки типа `TFS_C35189`;  это помогает проассоциировать Git коммиты с наборами изменений TFVC.
Это очень удобно, потому что вы можете узнать, какие из коммитов ассоциированы со слепком в TFVC с помощью простой команды.
Это не обязательное поведение (вы можете выключить его, вызвав `git config git-tf.tag false`) — `git-tf` и так хранит соответствия в файле `.git/git-tf`.


===== Начало работы: `git-tfs`

Клонирование в `git-tfs` слегка отличается.
Взгляните-ка:

[source,powershell]
----
PS> git tfs clone --with-branches \
    https://username.visualstudio.com/DefaultCollection \
    $/project/Trunk project_git
Initialized empty Git repository in C:/Users/ben/project_git/.git/
C15 = b75da1aba1ffb359d00e85c52acb261e4586b0c9
C16 = c403405f4989d73a2c3c119e79021cb2104ce44a
Tfs branches found:
- $/tfvc-test/featureA
The name of the local branch will be : featureA
C17 = d202b53f67bde32171d5078968c644e562f1c439
C18 = 44cd729d8df868a8be20438fdeeefb961958b674
----

Обратите внимание на флаг `--with-branches`.

`git-tfs` умеет сопоставлять ветки TFVC с ветками в Git и этот флаг говорит ему завести по локальной Git-ветке для каждой ветки в TFVC.
Крайне рекомендуется использовать эту опцию, если вы использовали ветки в TFS.
Но она не сработает для версий TFS ниже 2010-й: до этого релиза "ветки" были просто директориями и `git-tfs` неспособен отличить их от обычных директорий.

Давайте посмотрим на получившийся репозиторий:

[source,powershell]
----
PS> git log --oneline --graph --decorate --all
* 44cd729 (tfs/featureA, featureA) Goodbye
* d202b53 Branched from $/tfvc-test/Trunk
* c403405 (HEAD, tfs/default, master) Hello
* b75da1a New project
PS> git log -1
commit c403405f4989d73a2c3c119e79021cb2104ce44a
Author: Ben Straub <ben@straub.cc>
Date:   Fri Aug 1 03:41:59 2014 +0000

    Hello

    git-tfs-id: [https://username.visualstudio.com/DefaultCollection]$/myproject/Trunk;C16
----

Видим две локальные ветки — `master` и `featureA` — представляющие соответственно основную ветку разработки (`Trunk` в TFVC) и дочернюю ветку `featureA` в TFVC.
Также вы можете видеть, что "удалённый репозиторий" `tfs` имеет две ссылки — `default` и `featureA` — соответствующие тем же веткам в TFVC.
`git-tfs` также называет ветку с которой вы инициировали копирование `tfs/default`, имена остальных веток соответствуют таковым в TFVC.

Ещё одна стоящая внимание вещь: строки `git-tfs-id:` в сообщениях коммитов.
`git-tfs` использует их вместо меток для сопоставления наборов изменений из TFVC и коммитов в Git.
Как результат, ваши коммиты будут иметь различные SHA-1 хеши до и после отправки в TFVC.

===== Рабочий процесс с git-tf[s]

[NOTE]
====
Независимо от того, какой конкретный инструмент для работы с TFVC вы используете, вам следует задать некоторые конфигурационные параметры для избежания проблем.

[source,console]
----
$ git config set --local core.ignorecase=true
$ git config set --local core.autocrlf=false
----
====

Очевидно, после клонирования проекта вам захочется поработать над ним.
Но в TFVC и TFS есть несколько особенностей, осложняющих рабочий процесс:

. Функциональные ветки (feature branches), не представленные на TFVC сервере добавляют сложности.
  Всё из-за того, что TFVC имеет *совершенно* другую концепцию ветвления, нежели Git.
. Помните, что TFVC позволяет пользователям запретить изменения файлов другими пользователями.
  Разумеется, это не помешает вам изменить их в локальном репозитории, но вы не сможете отправить эти изменения на TFVC сервер пока не будет снят запрет.
. В TFS существует понятие "курируемых" наборов изменений; это означает, что прежде чем изменения будут приняты сервером, они должны успешно пройти фазы сборки и тестирования.
  При этом используется функциональность "откладывания изменений", не рассматриваемый нами в деталях.
  Вы можете вручную эмулировать подобное поведение в `git-tf`, а `git-tfs` предоставляет специальную команду `checkintool`, способную работать с "курируемыми" наборами изменений.

Для краткости мы рассмотрим здесь простой сценарий работы, избегающий описанных особенностей.

===== Рабочий процесс в `git-tf`

Предположим, вы проделали некую работу, зафиксировали несколько изменений в ветке `master` и готовы поделиться результатом.
Вот как выглядит Git репозиторий:

[source,console]
----
$ git log --oneline --graph --decorate --all
* 4178a82 (HEAD, master) update code
* 9df2ae3 update readme
* d44b17a (tag: TFS_C35190, origin_tfs/tfs) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Мы хотим взять слепок на момент коммита `4178a82` и отправить его на TFVC сервер.
Но для начала давайте проверим наличие наработок от других членов команды:

[source,console]
----
$ git tf fetch
Username: domain\user
Password:
Connecting to TFS...
Fetching $/myproject at latest changeset: 100%, done.
Downloaded changeset 35320 as commit 8ef06a8. Updated FETCH_HEAD.
$ git log --oneline --graph --decorate --all
* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text
| * 4178a82 (HEAD, master) update code
| * 9df2ae3 update readme
|/
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Похоже, вы работаете над проектом не в одиночку.
История разошлась.
Git очень хорош в таких ситуациях, но в случае TFVC есть два пути:

. Как пользователь Git, вы, наверняка, заходите создать коммит-слияние (в конце-концов именно так поступает `git pull`).
  В `git-tf` есть специальная команда для этого: `git tf pull`.
  Но помните, что TFVC сервер мыслит несколько иначе, и если вы отправите коммит-слияние, ваша история станет выглядеть по-разному со стороны Git и TFVC, что может привести к путанице.
  Хотя, если вы хотите отправить все изменения одним набором, это самый лёгкий способ.
. Перенос коммитов сделает историю линейной, а значит мы сможем сопоставить каждому Git-коммиту набор изменений в TFVC.
  Мы рекомендуем использовать именно этот способ как наиболее гибкий.
  В `git-tf` для этого служит команда `git tf pull --rebase`.

Выбор за вами.
Мы же последуем собственным советам:

[source,console]
----
$ git rebase FETCH_HEAD
First, rewinding head to replay your work on top of it...
Applying: update readme
Applying: update code
$ git log --oneline --graph --decorate --all
* 5a0e25e (HEAD, master) update code
* 6eb3eb5 update readme
* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Теперь всё готово к отправке данных на TFVC сервер.
`git-tf` предоставляет вам выбор: собрать все изменения воедино и сделать из них один набор изменений (опция `--shallow`, по умолчанию включённая), или создать отдельный набор изменений для каждого коммита в Git (опция `--deep`).
В этом примере мы создадим один набор изменений:

[source,console]
----
$ git tf checkin -m 'Updating readme and code'
Username: domain\user
Password:
Connecting to TFS...
Checking in to $/myproject: 100%, done.
Checked commit 5a0e25e in as changeset 35348
$ git log --oneline --graph --decorate --all
* 5a0e25e (HEAD, tag: TFS_C35348, origin_tfs/tfs, master) update code
* 6eb3eb5 update readme
* 8ef06a8 (tag: TFS_C35320) just some text
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Появилась новая метка `TFS_C35348`, указывающая на то, что TFVC сохранил слепок состояния `5a0e25e` под этим идентификатором.
Обращаем ваше внимание, что не каждый коммит в Git имеет аналог в TFVC; например `6eb3eb5` не представлен на сервере.

Такой вот рабочий процесс.
И ещё несколько важных моментов:

* Нет веток.
  `git-tf` умеет создавать Git-репозитории, соответствующие единственной ветке в TFVC.
* Делитесь наработками либо через TFVC-сервер, либо через Git-сервер, не используйте их одновременно.
  Разные `git-tf` клоны одного и того же TFVC-репозитория могут иметь различные SHA-1 хеши, что сулит нескончаемую головную боль.
* Если ваш рабочий процесс выстроен таким образом, что вы делитесь наработками через Git и лишь периодически синхронизируетесь с TFVC, не используйте более одного Git репозитория.


===== Рабочий процесс в `git-tfs`

Давайте пробежимся по тому же сценарию в `git-tfs`.
Вот новые коммиты в ветке `master` в нашем Git репозитории:

[source,powershell]
----
PS> git log --oneline --graph --all --decorate
* c3bd3ae (HEAD, master) update code
* d85e5a2 update readme
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 (tfs/default) Hello
* b75da1a New project
----

Проверим, что успели сделать другие:

[source,powershell]
----
PS> git tfs fetch
C19 = aea74a0313de0a391940c999e51c5c15c381d91d
PS> git log --all --oneline --graph --decorate
* aea74a0 (tfs/default) update documentation
| * c3bd3ae (HEAD, master) update code
| * d85e5a2 update readme
|/
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Пока мы работали, в TFVC появились свежие изменения, соответствующие коммиту `aea74a0`, и удалённая ветка `tfs/default` передвинулась.

Как и в случае с `git-tf`, у нас есть два пути решения этой проблемы:

. Переместить изменения и сделать историю линейной.
. Произвести слияние, сохранив историческую достоверность.

Мы хотим, чтобы каждому коммиту в Git соответствовал набор изменений в TFVC, так что мы будем перемещать изменения и делать историю линейной.

[source,powershell]
----
PS> git rebase tfs/default
First, rewinding head to replay your work on top of it...
Applying: update readme
Applying: update code
PS> git log --all --oneline --graph --decorate
* 10a75ac (HEAD, master) update code
* 5cec4ab update readme
* aea74a0 (tfs/default) update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Теперь мы готовы отправить наши наработки на TFVC сервер.
Для этого мы используем команду `rcheckin`, которая сопоставляет каждому коммиту в Git новый набор изменений в TFVC (команда `checkin` создала бы только один набор изменений, примерно как опция `squash` при интерактивном перемещении изменений).

[source,powershell]
----
PS> git tfs rcheckin
Working with tfs remote: default
Fetching changes from TFS to minimize possibility of late conflict...
Starting checkin of 5cec4ab4 'update readme'
 add README.md
C20 = 71a5ddce274c19f8fdc322b4f165d93d89121017
Done with 5cec4ab4b213c354341f66c80cd650ab98dcf1ed, rebasing tail onto new TFS-commit...
Rebase done successfully.
Starting checkin of b1bf0f99 'update code'
 edit .git\tfs\default\workspace\ConsoleApplication1/ConsoleApplication1/Program.cs
C21 = ff04e7c35dfbe6a8f94e782bf5e0031cee8d103b
Done with b1bf0f9977b2d48bad611ed4a03d3738df05ea5d, rebasing tail onto new TFS-commit...
Rebase done successfully.
No more to rcheckin.
PS> git log --all --oneline --graph --decorate
* ff04e7c (HEAD, tfs/default, master) update code
* 71a5ddc update readme
* aea74a0 update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Обратите внимание, как после каждой удачной ревизии на TFVC сервере `git-tfs` перемещает оставшиеся к отправке изменения на вновь созданные коммиты.
Это необходимо, потому что `git-tfs` добавляет строку `git-tfs-id` к сообщениям коммитов, меняя, таким образом, их SHA-1 хеши.
Это запланированное поведение и вам не о чем беспокоиться, просто помните об этом, особенно если вы публикуете эти коммиты где-либо ещё.

У TFS ещё много козырей в рукаве, типа курируемых наборов изменений, привязки ревизий к задачам, инспекция кода и прочее.
Возможно, кому-то покажется сложной работа с этими возможностями через командную строку.
К счастью, в `git-tfs` вы можете использовать графическую утилиту:

[source,powershell]
----
PS> git tfs checkintool
PS> git tfs ct
----

Выглядит она примерно так:

.Графическая утилита `git-tfs`.
image::images/git-tfs-ct.png[Графическая утилита `git-tfs`.]

Она покажется знакомой для пользователей TFS, потому что это тот же самый диалог, что вызывается из Visual Studio.

Также `git-tfs` позволяет управлять ветками в TFVC из Git репозитория.
Например, создадим новую ветку:

[source,powershell]
----
PS> git tfs branch $/tfvc-test/featureBee
The name of the local branch will be : featureBee
C26 = 1d54865c397608c004a2cadce7296f5edc22a7e5
PS> git log --oneline --graph --decorate --all
* 1d54865 (tfs/featureBee) Creation branch $/myproject/featureBee
* ff04e7c (HEAD, tfs/default, master) update code
* 71a5ddc update readme
* aea74a0 update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Создание ветки в TFVC означает создание новой ревизии, с которой и стартует ветка, в Git это выглядит как очередная фиксация изменений.
Обратите внимание, что `git-tfs` *создал* удалённую ветку `tfs/featureBee`, но указатель `HEAD` всё ещё находится на ветке `master`.
Если вы хотите продолжать работу в новой ветке, вам нужно базировать новые изменения на коммите `1d54865`, создав начиная с неё новую ветку.


===== Заключение по Git и TFS

`git-tf` и `git-tfs` — отличные инструменты для взаимодействия с TFVC сервером.
Они позволяют использовать преимущества Git для работы в локальном репозитории, избегая постоянных взаимодействий с центральным TFVC сервером.
Это упрощает вашу жизнь, но не заставляет ваших коллег также переходить на Git.
Если вы работаете под Windows (что вполне вероятно, раз уж вы используете TFS), тогда `git-tfs` будет наиболее разумным выбором, так как его функциональность наиболее полна; но если вы используете другую платформу, вам придётся использовать более ограниченный `git-tf`.
Как и с большинством других описываемых в этой главе инструментов, вам следует выбрать единственный "источник правды": вы будете делиться наработками либо через Git, либо через TFVC, но никак не через обе системы сразу.

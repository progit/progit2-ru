==== Bazaar
(((Bazaar)))(((Importing, from Bazaar)))

Bazaar это ДСКВ очень похожая на Git, поэтому репозиторий Bazaar достаточно легко сконвертировать в репозиторий Git.
Для этого вам необходимо подключить плагин `bzr-fastimport`.

===== Установка плагина bzr-fastimport

Для UNIX подобных систем и Windows процедура установки плагина отличается.
В первом случае, самый простой способ это установить пакет `bzr-fastimport`, вместе с которым будут установлены все необходимые зависимости.

Например, для Debian и подобных, следует выполнить:

[source,console]
----
$ sudo apt-get install bzr-fastimport
----

Для RHEL выполните следующую команду:

[source,console]
----
$ sudo yum install bzr-fastimport
----

Для Fedora, начиная с версии 22, новый менеджер пакетов dnf:

[source,console]
----
$ sudo dnf install bzr-fastimport
----

Если пакет отсутствует в репозитории для вашего дистрибутива, то вы можете установить его как плагин, используя следующие команды:

[source,console]
----
$ mkdir --parents ~/.bazaar/plugins                # создаст необходимые директории для плагинов
$ cd ~/.bazaar/plugins
$ bzr branch lp:bzr-fastimport fastimport          # импортирует плагин fastimport
$ cd fastimport
$ sudo python setup.py install --record=files.txt  # установит плагин
----

Чтобы плагин заработал, вам понадобится модуль Python `fastimport`.
Проверить наличие и установить его можно следующими командами:

[source,console]
----
$ python -c "import fastimport"
Traceback (most recent call last):
  File "<string>", line 1, in <module>
ImportError: No module named fastimport
$ pip install fastimport
----
Если модуль недоступен, то его можно скачать по адресу https://pypi.python.org/pypi/fastimport/.

Во втором случае (в Windows), `bzr-fastimport` устанавливается автоматически при стандартной установке (все галочки отмечены).
В таком случае дальнейших действий не требуется.

Процесс импорта Bazaar репозитория отличается в зависимости от того одна ветка в вашем репозитории или несколько.

===== Project with a single branch

Now `cd` in the directory that contains your Bazaar repository and initialize the Git repository:

[source,console]
----
$ cd /path/to/the/bzr/repository
$ git init
----

Now, you can simply export your Bazaar repository and convert it into a Git repository using the following command:

[source,console]
----
$ bzr fast-export --plain . | git fast-import
----

Depending on the size of the project, your Git repository is built in a lapse from a few seconds to a few minutes.

===== Case of a project with a main branch and a working branch

You can also import a Bazaar repository that contains branches.
Let us suppose that you have two branches: one represents the main branch (myProject.trunk), the other one is the working branch (myProject.work).

[source,console]
----
$ ls
myProject.trunk myProject.work
----

Create the Git repository and `cd` into it:

[source,console]
----
$ git init git-repo
$ cd git-repo
----

Pull the master branch into git:

[source,console]
----
$ bzr fast-export --export-marks=../marks.bzr ../myProject.trunk | \
git fast-import --export-marks=../marks.git
----

Pull the working branch into Git:

[source,console]
----
$ bzr fast-export --marks=../marks.bzr --git-branch=work ../myProject.work | \
git fast-import --import-marks=../marks.git --export-marks=../marks.git
----

Now `git branch` shows you the `master` branch as well as the `work` branch.
Check the logs to make sure they're complete and get rid of the `marks.bzr` and `marks.git` files.

===== Synchronizing the staging area

Whatever the number of branches you had and the import method you used, your staging area is not synchronized with `HEAD`, and with the import of several branches, your working directory is not synchronized either.
This situation is easily solved by the following command:

[source,console]
----
$ git reset --hard HEAD
----

===== Ignoring the files that were ignored with .bzrignore

Now let's have a look at the files to ignore.
The first thing to do is to rename `.bzrignore` into `.gitignore`.
If the `.bzrignore` file contains one or several lines starting with "!!" or "RE:", you'll have to modify it and perhaps create several `.gitignore` files in order to ignore exactly the same files that Bazaar was ignoring.

Finally, you will have to create a commit that contains this modification for the migration:

[source,console]
----
$ git mv .bzrignore .gitignore
$ # modify .gitignore if needed
$ git commit -am 'Migration from Bazaar to Git'
----

===== Sending your repository to the server

Here we are!
Now you can push the repository onto its new home server:

[source,console]
----
$ git remote add origin git@my-git-server:mygitrepository.git
$ git push origin --all
$ git push origin --tags
----

Your Git repository is ready to use.

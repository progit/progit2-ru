==== Bazaar
(((Bazaar)))(((Importing, from Bazaar)))

Bazaar это ДСКВ очень похожая на Git, поэтому репозиторий Bazaar достаточно легко сконвертировать в репозиторий Git.
Для этого вам необходимо подключить плагин `bzr-fastimport`.

===== Установка плагина bzr-fastimport

Для UNIX подобных систем и Windows процедура установки плагина отличается.
В первом случае, самый простой способ это установить пакет `bzr-fastimport`, вместе с которым будут установлены все необходимые зависимости.

Например, для Debian и подобных, следует выполнить:

[source,console]
----
$ sudo apt-get install bzr-fastimport
----

Для RHEL выполните следующую команду:

[source,console]
----
$ sudo yum install bzr-fastimport
----

Для Fedora, начиная с версии 22, новый менеджер пакетов dnf:

[source,console]
----
$ sudo dnf install bzr-fastimport
----

Если пакет отсутствует в репозитории для вашего дистрибутива, то вы можете установить его как плагин, используя следующие команды:

[source,console]
----
$ mkdir --parents ~/.bazaar/plugins                # создаст необходимые директории для плагинов
$ cd ~/.bazaar/plugins
$ bzr branch lp:bzr-fastimport fastimport          # импортирует плагин fastimport
$ cd fastimport
$ sudo python setup.py install --record=files.txt  # установит плагин
----

Чтобы плагин заработал, вам понадобится модуль Python `fastimport`.
Проверить наличие и установить его можно следующими командами:

[source,console]
----
$ python -c "import fastimport"
Traceback (most recent call last):
  File "<string>", line 1, in <module>
ImportError: No module named fastimport
$ pip install fastimport
----
Если модуль недоступен, то его можно скачать по адресу https://pypi.python.org/pypi/fastimport/.

Во втором случае (в Windows), `bzr-fastimport` устанавливается автоматически при стандартной установке (все галочки отмечены).
В таком случае дальнейших действий не требуется.

Процесс импорта Bazaar репозитория отличается в зависимости от того одна ветка в вашем репозитории или несколько.

===== Проект с одной веткой

Войдите в директорию, содержащую ваш Bazaar репозиторий и проинициализируйте Git репозиторий:

[source,console]
----
$ cd /path/to/the/bzr/repository
$ git init
----

Теперь, просто экспортируйте свой Bazaar репозиторий и сконвертируйте его в Git репозиторий используя следующую команду:

[source,console]
----
$ bzr fast-export --plain . | git fast-import
----

В зависимости от размера проекта, Git репозиторий будет готов через несколько секунд или минут.

===== Проект с основной и рабочей ветками

Вы так же можете импортировать Bazaar репозиторий с несколькими ветками.
Предположим, что в вашем репозитории две ветки: одна является основной веткой проекта (myProject.trunk), другая -- рабочей (myProject.work).

[source,console]
----
$ ls
myProject.trunk myProject.work
----

Проинициализируйте Git репозиторий и войдите в его директорию:

[source,console]
----
$ git init git-repo
$ cd git-repo
----

Импортируйте в Git основную ветку с помощью команды:

[source,console]
----
$ bzr fast-export --export-marks=../marks.bzr ../myProject.trunk | \
git fast-import --export-marks=../marks.git
----

Импортируйте в Git рабочую ветку с помощью команды:

[source,console]
----
$ bzr fast-export --marks=../marks.bzr --git-branch=work ../myProject.work | \
git fast-import --import-marks=../marks.git --export-marks=../marks.git
----

Теперь, команда `git branch` покажет вам две ветки: `master` и `work`.
Проверьте логи чтобы убедиться в отсутствии ошибок, после этого можно удалять файлы `marks.bzr` и `marks.git`.

===== Синхронизация индекса

Вне зависимости от количества веток и выбранного метода импорта, индекс не синхронизируется с `HEAD`, а при импорте нескольких веток -- так же не синхронизируется рабочая директория.
Эту ситуацию можно легко исправить следующей командой:

[source,console]
----
$ git reset --hard HEAD
----

===== Игнорирование файлов из .bzrignore

Теперь давайте посмотрим на файлы, которые следует игнорировать.
Первое, что нужно сделать -- это переименовать `.bzrignore` в `.gitignore`.
Если файл `.bzrignore` содержит одну или несколько строк начинающихся с "!!" или "RE:", нужно их изменить и, возможно, создать несколько файлов `.gitignore`, чтобы заставить Git игнорировать точно те же файлы, которые игнорируются Bazaar.

Наконец, создайте коммит со всеми изменениями, внесенными во время миграции:

[source,console]
----
$ git mv .bzrignore .gitignore
$ # modify .gitignore if needed
$ git commit -am 'Migration from Bazaar to Git'
----

===== Отправка репозитория на сервер

Вот и всё!
Теперь вы можете отправить репозиторий на сервер в его новый дом:

[source,console]
----
$ git remote add origin git@my-git-server:mygitrepository.git
$ git push origin --all
$ git push origin --tags
----

Ваш Git репозиторий готов к использованию.

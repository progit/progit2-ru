==== Subversion

(((Subversion)))
(((Importing, from Subversion)))
Если вы читали предыдущий раздел про использование `git svn`, вы уже должны знать, как использовать команду `git svn clone` чтобы склонировать Subversion репозиторий.
После этого вы можете прекратить использовать Subversion и перейти на Git.
Сразу же после клонирования вам будет доступна вся история репозитория, хотя сам процесс получения копии может затянуться.

В добавок к этому импортирование не идеально, так что вы, возможно, захотите сделать его как можно более правильно с первой попытки.
И первая проблема — это информация об авторстве.
В Subversion на каждого участника рабочего процесса заведён пользователь, информация о пользователе сохраняется вместе с каждой ревизией.
В предыдущем разделе вы могли видеть пользователя `schacon` в некоторых местах, типа вывода команды `blame` или `git svn log`.
Если вы хотите видеть подробную информацию об авторстве в Git, вам потребуется задать соответствие между пользователями Subversion и авторами в Git.
Создайте файл `users.txt` со следующим содержимым:

[source]
----
schacon = Scott Chacon <schacon@geemail.com>
selse = Someo Nelse <selse@geemail.com>
----

Чтобы получить список имён пользователей в SVN, выполните следующее:

[source,console]
----
$ svn log --xml | grep author | sort -u | \
  perl -pe 's/.*>(.*?)<.*/$1 = /'
----

Эта команда генерирует XML документ, оставляет только строчки с авторами, избавляется от дубликатов, а затем обрезает XML-теги.
(Очевидно, она сработает только на компьютерах с установленными `grep`, `sort` и `perl`.)
Вы можете направить вывод этой команды в файл `users.txt`, а затем просто дописать Git авторов в каждой строке.

Затем вы можете передать этот файл `git svn`, чтобы тот мог проассоциировать авторов.
Также вы можете указать `git svn` не включать метаданные, обычно вставляемые в сообщения коммитов, передав флаг `--no-metadata` командам `clone` или `init`.
Итого, команда `import` примет вид:

[source,console]
----
$ git svn clone http://my-project.googlecode.com/svn/ \
      --authors-file=users.txt --no-metadata -s my_project
----

Теперь у вас будет красивая копия Subversion репозитория в директории `my_project`.
Вместо коммитов типа

[source]
----
commit 37efa680e8473b615de980fa935944215428a35a
Author: schacon <schacon@4c93b258-373f-11de-be05-5f7a86268029>
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk

    git-svn-id: https://my-project.googlecode.com/svn/trunk@94 4c93b258-373f-11de-
    be05-5f7a86268029
----

вы получите следующее:

[source]
----
commit 03a8785f44c8ea5cdb0e8834b7c8e6c469be2ff2
Author: Scott Chacon <schacon@geemail.com>
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk
----

Теперь не только поле с информацией об авторстве выглядит лучше, но и `git-svn-id` не мозолит глаза.

Также вам следует немного "вычистить" репозиторий сразу после импорта.
Во-первых, следует удалить ненужные ссылки, устанавливаемые `git svn`.
Вначале переместим метки, чтобы они действительно стали метками, а не странными удалёнными ветками, а затем удалим остальное, сделав все ветки локальными.

Чтобы переместить метки, выполните следующие команды:

[source,console]
----
$ cp -Rf .git/refs/remotes/origin/tags/* .git/refs/tags/
$ rm -Rf .git/refs/remotes/origin/tags
----

Они берут все удалённые ветки, начинавшиеся с `remotes/origin/tags/` и делают из них настоящие легковесные метки.

Далее, сделайте остальные ветки, начинающиеся с `refs/remotes`, локальными, выполнив следующее:

[source,console]
----
$ cp -Rf .git/refs/remotes/* .git/refs/heads/
$ rm -Rf .git/refs/remotes
----

Теперь все ветки и метки из Subversion стали настоящими Git ветками и метками соответственно.
Последнее, что нужно сделать — это добавить ваш Git сервер в качестве удалённого репозитория и залить данные на него.
Вот пример добавления удалённого репозитория:

[source,console]
----
$ git remote add origin git@my-git-server:myrepository.git
----

Так как вы хотите отправить все ваши ветки и метки, выполите это:

[source,console]
----
$ git push origin --all
----

Наконец, все ваши ветки и метки перенесены на Git сервер и облагорожены!

[[r_git_tfs]]
==== TFS

(((TFS)))(((Importing, from TFS)))
Если вы переходите с TFVC на Git, вам захочется получить как можно более точную копию репозитория.
Поэтому, несмотря на то, что мы рассматривали `git-tfs` и `git-tf` в предыдущих разделах, здесь мы сосредоточимся лишь на использовании `git-tfs`, потому что этот инструмент поддерживает ветки, чего нет в `git-tf`.

[NOTE]
====
Это дорога в один конец.
Получившийся Git репозиторий невозможно будет подключить к TFVC.
====

Первым делом нужно задать соответствия между пользователями.
TFVC не следит за данными, сохраняемыми в поле "автор" наборов изменений, Git же ожидает увидеть там человекопонятное имя и адрес электронной почты.
Вы можете получить список всех авторов с помощью консольного клиента `tf`:

[source,powershell]
----
PS> tf history $/myproject -recursive > AUTHORS_TMP
----

Эта команда пробегается по всем ревизиям проекта и сохраняет информацию о них в файл `AUTHORS_TMP`, из которого мы впоследствии вытянем пользователей (2-я колонка).
Откройте этот файл и запомните начало и конец колонки с пользователями, а затем используйте следующую команду (параметр `11-20` -- это и есть границы колонки с пользователями):

[source,powershell]
----
PS> cat AUTHORS_TMP | cut -b 11-20 | tail -n+3 | uniq | sort > AUTHORS
----

Команда `cut` оставляет символы с 11-го по 20-й из каждой строки.
Команда `tail` пропускает первые две строки с заголовком и ASCII-art'ом.
Результат направляется в команду `uniq`, которая избавляется от дубликатов, её вывод сортируется и сохраняется в файл `AUTHORS`.
Далее необходимо поработать руками: для того, чтобы `git-tfs` распознал записи в этом файле, они должны иметь следующий формат:

[source,text]
----
DOMAIN\username = User Name <email@address.com>
----

Часть слева от знака равенства -- это поле "User" из TFVC, а часть справа -- соответствующий ему автор в Git.

Как только этот файл готов, необходимо сделать полную копию TFVC проекта:

[source,powershell]
----
PS> git tfs clone --with-branches --authors=AUTHORS https://username.visualstudio.com/DefaultCollection $/project/Trunk project_git
----

Затем вы, возможно, захотите избавиться от строчек с `git-tfs-id` в сообщениях коммитов.
Следующая команда сделает это:

[source,powershell]
----
PS> git filter-branch -f --msg-filter 'sed "s/^git-tfs-id:.*$//g"' -- --all
----

Она использует утилиту `sed` из пакета `git-bash` чтобы заменить все строки, начинающиеся с `git-tfs-id:` на пустые, которые Git проигнорирует.

Теперь всё готово.
Можете добавить новый удалённый репозиторий, отправить изменения в него и ваша команда может начинать работу с Git.

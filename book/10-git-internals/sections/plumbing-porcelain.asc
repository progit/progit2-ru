[[r_plumbing_porcelain]]
=== Сантехника и Фарфор

В этой книге было описано, как пользоваться Git, применяя примерно три десятка команд, например, `checkout`, `branch`, `remote` и т.п.
Но так как сначала Git был скорее инструментарием для создания СКВ, чем СКВ, удобной для пользователей, в нём полно команд, выполняющих низкоуровневые операции, которые спроектированы так, чтобы их можно было использовать в цепочку в стиле UNIX, а также использовать в сценариях.
Эти команды, как правило, называют служебными ("plumbing" — трубопровод), а ориентированные на пользователя называют пользовательскими ("porcelain" — фарфор).

Первые девять глав книги были посвящены практически лишь пользовательским командам.
В данной главе же рассматриваются именно низкоуровневые служебные команды, дающие контроль над внутренними процессами Git и показывающие, как он работает и почему он работает так, а не иначе.
Предполагается, что данные команды не будут использоваться напрямую из командной строки, а будут служить в качестве строительных блоков для новых команд и пользовательских сценариев.

Когда вы выполняете `git init` в новой или существовавшей ранее директории, Git создаёт подкаталог `.git`, в котором располагается почти всё, чем он заправляет.
Если требуется выполнить резервное копирование или клонирование репозитория, достаточно скопировать всего лишь этот каталог, чтобы получить почти всё необходимое.
И данная глава почти полностью посвящена его содержимому.
Вот так он выглядит:

[source,console]
----
$ ls -F1
HEAD
config*
description
hooks/
info/
objects/
refs/
----

Там могут быть и другие файлы, но выше приведён листинг свежесозданного репозитория — это то, что вы увидите непосредственно после `git init`.
Файл `description` используется только программой GitWeb, не обращайте на него внимание.
Файл `config` содержит специфичные для этого репозитория конфигурационные параметры, а в директории `info` расположен файл с глобальными настройкам игнорирования файлов (((excludes))) — он позволяет исключить файлы, которые вы не хотите помещать в .gitignore.
В директории `hooks` располагаются клиентские и серверные триггеры, подробно рассмотренные в главе <<ch08-customizing-git#r_git_hooks>>.

Итак, осталось четыре важных элемента: файлы `HEAD` и `index` (ещё не созданный) и директории `objects` и `refs`.
Это ключевые элементы Git.
В директории `objects` находится, собственно, база данных объектов Git; в `refs` — ссылки на объекты коммитов в этой базе (ветки); файл `HEAD` указывает на текущую ветку, a в файле `index` хранится содержимое индекса.
Сейчас мы детально разберёмся с этими элементами, чтобы понять как работает Git.

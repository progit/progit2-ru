[[r_plumbing_porcelain]]
=== Сантехника и Фарфор

В этой книге было описано, как пользоваться Git, применяя примерно три десятка команд, таких как `checkout`, `branch`, `remote` и так далее.
Но так как сначала Git был скорее инструментарием для создания системы контроля версий, чем самой СКВ, удобной для пользователей, то в нём полно команд, выполняющих низкоуровневые операции, которые спроектированы так, чтобы их можно было использовать объединив в цепочку в стиле UNIX, а также использовать в скриптах.
Эти команды, как правило, называют служебными ("plumbing" -- трубопровод), а ориентированные на пользователя называют пользовательскими ("porcelain" -- фарфор).

Первые девять глав книги были посвящены в основном пользовательским командам.
В данной главе рассматриваются именно низкоуровневые служебные команды, дающие контроль над внутренними процессами Git и показывающие, как он работает и почему он работает так, а не иначе.
Предполагается, что данные команды не будут использоваться напрямую из командной строки, а будут служить в качестве строительных блоков для новых команд и пользовательских скриптов.

Когда вы выполняете `git init` в новой или существовавшей ранее директории, Git создаёт подкаталог `.git`, в котором располагается почти всё, чем он манипулирует.
Если требуется выполнить резервное копирование или клонирование репозитория, достаточно скопировать лишь этот каталог, чтобы получить почти всё необходимое.
Данная глава почти полностью посвящена его содержимому.
Вот так выглядит только что созданная директория `.git`:

[source,console]
----
$ ls -F1
config
description
HEAD
hooks/
info/
objects/
refs/
----

В зависимости от используемой версии Git, здесь могут присутствовать и другие файлы, но по умолчанию команда `git init` создаёт именно такое содержимое в директории `.git`.
Файл `description` используется только программой GitWeb, не обращайте на него внимание.
Файл `config` содержит специфичные для этого репозитория конфигурационные параметры, а в директории `info` расположен файл с глобальными настройкам игнорирования файлов (((excludes))) -- он позволяет исключить файлы, которые вы не хотите помещать в .gitignore.
В директории `hooks` располагаются клиентские и серверные хуки, подробно рассмотренные в главе <<ch08-customizing-git#r_git_hooks>>.

Итак, осталось четыре важных элемента: файлы `HEAD` и `index` (ещё не созданный) и директории `objects` и `refs`.
Это ключевые элементы Git.
В директории `objects` находится база данных объектов Git; в `refs` -- ссылки на объекты коммитов в этой базе (ветки, тэги и другие); файл `HEAD` указывает на текущую ветку, a в файле `index` хранится содержимое индекса.
Далее мы детально рассмотрим эти элементы, чтобы понять как работает Git.

=== Графические интерфейсы

(((GUIs)))(((Graphical tools)))
Родная среда обитания Git — это терминал.
Новые фичи вначале доступны только там, и лишь терминал поможет вам полностью контролировать всю мощь Git.
Но текстовый интерфейс — не лучший выбор для всех задач; иногда графическое представление более предпочтительно, а некоторые пользователи чувствуют себя комфортней, орудуя мышкой.

Также стоит понимать, что разные интерфейсы служат разным целям.
Некоторые Git клиенты ограничиваются лишь той функциональностью, которую их автор считает наиболее востребованным или эффективным.
Учитывая это, ни один из представленных ниже инструментов не может быть "лучше" остальных: они просто заточены под разные задачи.
Также стоит помнить, что всё, что можно сделать с помощью графического интерфейса, может быть выполнено и из консоли. Командная строка — по прежнему место где у вас больше всего мощи и контроля над репозиторием.

==== `gitk` и `git-gui`

(((git commands, gitk)))(((git commands, gui)))(((gitk)))
Установив Git, вы также получаете два графических инструмента: `gitk` и `git-gui`.

`gitk` — это графический просмотрщик истории.
Что-то типа улучшенных `git log` и `git grep`.
Это тот инструмент, который вы будете использовать для поиска событий и визуализации истории.

Проще всего вызвать Gitk из командной строки:
Просто перейдите в директорию с репозиторием и наберите:

[source,console]
----
$ gitk [git log options]
----

Gitk принимает кучу различных опций, большинство из которых передаются в `git log` (который, в свою очередь, используется в Gitk).
Возможно, наиболее используемая опция — `--all`, которая указывает Gitk выводить коммиты, доступные из _любой_ ссылки, а не только HEAD.
Интерфейс Gitk выглядит так:

.`gitk`- инструмент  для просмотра истории.
image::images/gitk.png[`gitk`- инструмент  для просмотра истории.]

Интерфейс на картинке похож на вывод `git log --graph`; каждая точка соответствует коммиту, линии отражают родство коммитов, а ссылки изображены цветными прямоугольниками.
Жёлтая точка обозначает HEAD, а красная — изменения, которые попадут в следующий коммит.
Внизу экрана расположены элементы интерфейса для просмотра выделенного коммита: слева показаны изменения и комментарий, а справа — общая информация по изменённым файлам.
В центре экрана расположены элементы для поиска по истории.

`git-gui`, в отличие от `gitk` — это инструмент редактирования отдельных коммитов.
Его тоже очень просто вызвать из консоли:

[source,console]
-----
$ git gui
-----

И его интерфейс выглядит так:

.`git gui` — инструмент редактирования коммитов.
image::images/git-gui.png[`git gui` — инструмент редактирования коммитов.]

Слева находится область редактирования Git индекса: изменения в рабочей директории наверху, добавленные в индекс изменения — снизу.
Вы можете перемещать файлы целиком между двумя состояниями, кликая на иконки, или же вы можете просмотреть изменения в конкретном файле, выбрав его имя.

Справа вверху расположена область просмотра изменений выделенного файла.
Можно добавлять отдельный кусочки или строки в индекс из контекстного меню в этой области.

Справа снизу находится область для ввода сообщения коммита и несколько кнопок. Введите сообщение и нажмите кнопку "Commit" чтобы выполнить коммит.
Также можно изменить предыдущий коммит, выбрав радиокнопку "Amend". Это действие также обновить область добавленных в индекс изменений содержимое предыдущего коммита.
После этого вы можете как обычно добавлять или удалять файлы, а также изменить сообщение коммита. По нажатию кнопки "Commit" новый коммит затрёт предыдущий.

`gitk` и `git-gui` — это примеры инструментов, ориентированных на задачи.
Каждый из них заточен под определённую задачу (просмотр истории или создание коммитов, соответственно) и не поддерживает фичи Git, ненужные для этой задачи.


==== GitHub для Mac и Windows

(((GitHub for Mac)))(((GitHub for Windows)))
Компания GitHub выпустила два инструмента, ориентированных на рабочий процесс, а не на конкретные задачи: один для Windows, второй — для Mac.
Эти клиенты — хороший пример процесс-ориентированного ПО: вместо предоставления доступа ко всей функциональности Git, они концентрируются на небольшом наборе фич, работающих вместе для достижения цели.
Выглядят они примерно так:

.GitHub для Mac.
image::images/github_mac.png[GitHub для Mac.]

.GitHub для Windows.
image::images/github_win.png[GitHub для Windows.]

Они спроектированы по одному шаблону, поэтому мы будет рассматривать их как один продукт в этой главе.
Мы не будем разбирать по косточкам эти инструменты (в конце-концов у них есть документация), а лишь быстренько взглянем на экран изменений (место, где вы будете зависать больше всего).

* Слева расположен список отслеживаемых репозиториев; можно добавить репозиторий (склонировав его, либо указав путь к существующей копии) нажатием кнопки "+" над списком.
* В центре экрана расположена область редактирования коммита: тут можно ввести сообщение коммита и выбрать файлы для включение в него.
  (На Windows, история коммитов расположена под этой областью, на Mac это отдельная вкладка.)
* Справа — просмотр изменений: что изменилось в рабочей директории, какие изменения войдут в коммит.
* И стоит обратить внимание на кнопку "Sync" справа вверху, которая используется для синхронизации по сети.

[NOTE]
====
Необязательно регистрироваться на GitHub, чтобы работать с этими инструментами.
Хотя они навязывают использование GitHub, оба инструмента прекрасно работают с любым другим Git сервером.
====

===== Установка

GitHub для Windows можно скачать на https://windows.github.com[], а для Mac — на https://mac.github.com[].
При первом запуске обе программы проведут первоначальную настройку Git, например, сконфигурируют ваше имя и email, а также установят разумные значения по умолчанию для распространённых опций типа CRLF-поведение и хранилище паролей.

Оба инструмента поддерживают автообновление в фоне — это означает, что у вас всегда будет последняя версия.
Это также относится к поставляемому в комплекте с ними Git — вам никогда не придётся обновлять его вручную.
На Windows вы также получаете ярлык для запуска PowerShell с Posh-git, который мы рассмотрим далее в этой главе.

Следующий шаг — скормить программе парочку репозиториев для работы.
Клиент для GitHub показывает список репозиториев, доступных вам на GitHub, и вы можете склонировать любой в один клик.
Если же у вас уже есть склонированный репозиторий, просто перетяните его из окна Finder (или Windows Explorer) в окно клиента GitHub, и он будет включён в список репозиториев слева.

===== Рекомендуемый рабочий процесс

После установки GitHub клиент можно использовать для решения кучи стандартных задач.
Рекомендуемый ниже подход к работе иногда называют "GitHub Flow".
Мы рассмотрели этот рабочий процесс в главе <<ch06-github#r_github_flow>>, но вкратце, важны два момента: (а) вы коммитите в отдельные ветки и (б) вы регулярно забираете изменения с удалённого репозитория.

Управление ветками слегка различается на Mac и Windows.
В Mac версии для создания ветки есть кнопка вверху окна:

.Кнопка создания ветки на Mac.
image::images/branch_widget_mac.png[Кнопка создания ветки на Mac.]

На Windows создание ветки происходит путём ввода её имени в переключатель веток:

.Создание ветки в Windows.
image::images/branch_widget_win.png[Создание ветки в Windows.]

После создания ветки добавление коммитов в неё довольно тривиально.
Измените что-нибудь в рабочей директории и, переключившись в окно клиента GitHub, вы увидите свои изменения.
Введите сообщение коммита, выберете файлы для включения в коммит и нажмите кнопку "Commit" (ctrl-enter or ⌘-enter).

Взаимодействие с удалёнными репозиториями происходит в первую очередь посредством кнопки "Sync".
В Git есть отдельные команды для отправки изменений на сервер, слияния изменений воедино и перемещения веток друг относительно друга, но клиент GitHub совмещает все эти команды в одну.
Вот что происходит когда вы жмёте "Sync":

. `git pull --rebase`.
  Если эта команда выполнится с ошибкой, будет выполнено `git pull --no-rebase`.
. `git push`.

Это довольно привычный, но рутинный процесс при работе по "GitHub Flow", совмещение команд воедино действительно экономит время.

===== Заключение

Перечисленные инструменты отлично решают поставленные перед ними задачи.
С их помощью разработчики (и не только) могут начать совместную работу над проектами в считанные минуты, причём с настроенным рабочим процессом.
Но если вы придерживаетесь иных подходов к использованию Git, или если вам нужно больше контроля над происходящим, мы рекомендуем вам присмотреться к другим клиентам, а то и вовсе к командной строке.


==== Другие инструменты

Существует огромное множество других графических инструментов для работы с Git, начиная от специализированных, выполняющих одну задачу, заканчивая "комбайнами" покрывающими всю функциональность Git.
На официальном сайте Git поддерживается в актуальном состоянии список наиболее популярных оболочек: http://git-scm.com/downloads/guis[].
Более подробный список доступен на Git вики: https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces[].

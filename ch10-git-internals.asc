[#ch10-git-internals]
[[r_git_internals]]
== Git изнутри

Вы могли прочитать почти всю книгу перед тем, как приступить к этой главе, а могли только часть -- в любом случае в данной главе рассматриваются внутренние процессы Git и особенности его реализации.
На наш взгляд, изучение этого материала является основой понимания того, насколько Git полезный и мощный инструмент, однако, некоторые утверждают, что изложение этого материала может сбить новичков с толку и оказаться для них неоправданно сложным.
Именно поэтому глава отнесена в самый конец книги, так что вы можете начать читать её раньше или позже по ходу обучения.
Мы оставляем выбор за вами.

Раз уж вы тут, приступим.
Во-первых, напомню, что Git -- это, по сути, контентно-адресуемая файловая система с пользовательским интерфейсом системы контроля версий поверх неё.
Довольно скоро станет понятнее, что это значит.

На заре развития Git (примерно до версии 1.5) интерфейс был значительно сложнее, поскольку был больше похож на интерфейс доступа к файловой системе, чем на законченную систему контроля версий.
За последние годы, интерфейс значительно очищен и упрощен до уровня аналогов; тем не менее, сохраняется стереотип о том, что интерфейс у Git чересчур сложен и труден для изучения.

Контентно-адресуемая файловая система -- основа Git, невероятно крута, именно её мы рассмотрим в этой главе в первую очередь; затем вы узнаете о транспортных механизмах и инструментах обслуживания репозитория, с которыми возможно вам придётся столкнуться.

include::book/10-git-internals/sections/plumbing-porcelain.asc[]

include::book/10-git-internals/sections/objects.asc[]

include::book/10-git-internals/sections/refs.asc[]

include::book/10-git-internals/sections/packfiles.asc[]

include::book/10-git-internals/sections/refspec.asc[]

include::book/10-git-internals/sections/transfer-protocols.asc[]

include::book/10-git-internals/sections/maintenance.asc[]

include::book/10-git-internals/sections/environment.asc[]

=== Заключение

Теперь вы довольно хорошо понимаете, что Git делает за кулисами и, в некоторой степени, как он устроен.
В данной главе мы рассмотрели несколько служебных команд -- более низкоуровневых и простых, чем обычные пользовательские команды, описанные в остальной части книги.
Понимание принципов работы Git на более низком уровне поможет вам лучше понять его работу в целом и даст возможность написать собственные утилиты и сценарии для организации специфического процесса работы с Git.

Git как контентно-адресуемая файловая система -- очень мощный инструмент, который можно использовать как нечто большее, чем просто систему контроля версий.
Надеемся, полученное знание внутренней реализации Git поможет вам написать своё крутое приложение, использующее эти технологии, и позволит вам чувствовать себя свободнее с Git даже в продвинутых вещах.
